// <auto-generated>
using System.Reflection;

namespace FxResources.WindowsBase
{
    internal static class SR { }
}
namespace MS.Internal.WindowsBase
{
    internal static partial class SRID
    {
        private static global::System.Resources.ResourceManager s_resourceManager;
        internal static global::System.Resources.ResourceManager ResourceManager => s_resourceManager ?? (s_resourceManager = new global::System.Resources.ResourceManager(typeof(FxResources.WindowsBase.SR)));
        internal static global::System.Globalization.CultureInfo Culture { get; set; }

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static string GetResourceString(string resourceKey, string defaultValue = null) =>  ResourceManager.GetString(resourceKey, Culture);
        /// <summary>en</summary>
        internal const string WPF_UILanguage = nameof(WPF_UILanguage);
        /// <summary>Cannot modify this property on the Empty Rect.</summary>
        internal const string Rect_CannotModifyEmptyRect = nameof(Rect_CannotModifyEmptyRect);
        /// <summary>Cannot call this method on the Empty Rect.</summary>
        internal const string Rect_CannotCallMethod = nameof(Rect_CannotCallMethod);
        /// <summary>Width and Height must be non-negative.</summary>
        internal const string Size_WidthAndHeightCannotBeNegative = nameof(Size_WidthAndHeightCannotBeNegative);
        /// <summary>Width must be non-negative.</summary>
        internal const string Size_WidthCannotBeNegative = nameof(Size_WidthCannotBeNegative);
        /// <summary>Height must be non-negative.</summary>
        internal const string Size_HeightCannotBeNegative = nameof(Size_HeightCannotBeNegative);
        /// <summary>Cannot modify this property on the Empty Size.</summary>
        internal const string Size_CannotModifyEmptySize = nameof(Size_CannotModifyEmptySize);
        /// <summary>Transform is not invertible.</summary>
        internal const string Transform_NotInvertible = nameof(Transform_NotInvertible);
        /// <summary>Expected object of type '{0}'.</summary>
        internal const string General_Expected_Type = nameof(General_Expected_Type);
        /// <summary>Value cannot be null. Object reference: '{0}'.</summary>
        internal const string ReferenceIsNull = nameof(ReferenceIsNull);
        /// <summary>The parameter value must be between '{0}' and '{1}'.</summary>
        internal const string ParameterMustBeBetween = nameof(ParameterMustBeBetween);
        /// <summary>Handler has not been registered with this event.</summary>
        internal const string Freezable_UnregisteredHandler = nameof(Freezable_UnregisteredHandler);
        /// <summary>Cannot use a DependencyObject that belongs to a different thread than its parent Freezable.</summary>
        internal const string Freezable_AttemptToUseInnerValueWithDifferentThread = nameof(Freezable_AttemptToUseInnerValueWithDifferentThread);
        /// <summary>This Freezable cannot be frozen.</summary>
        internal const string Freezable_CantFreeze = nameof(Freezable_CantFreeze);
        /// <summary>The provided DependencyObject is not a context for this Freezable.</summary>
        internal const string Freezable_NotAContext = nameof(Freezable_NotAContext);
        /// <summary>Cannot promote from '{0}' to '{1}' because the target map is too small.</summary>
        internal const string FrugalList_TargetMapCannotHoldAllData = nameof(FrugalList_TargetMapCannotHoldAllData);
        /// <summary>Cannot promote from Array.</summary>
        internal const string FrugalList_CannotPromoteBeyondArray = nameof(FrugalList_CannotPromoteBeyondArray);
        /// <summary>Cannot promote from '{0}' to '{1}' because the target map is too small.</summary>
        internal const string FrugalMap_TargetMapCannotHoldAllData = nameof(FrugalMap_TargetMapCannotHoldAllData);
        /// <summary>Cannot promote from Hashtable.</summary>
        internal const string FrugalMap_CannotPromoteBeyondHashtable = nameof(FrugalMap_CannotPromoteBeyondHashtable);
        /// <summary>Unrecognized Key '{0}'.</summary>
        internal const string Unsupported_Key = nameof(Unsupported_Key);
        /// <summary>Specified priority is not valid.</summary>
        internal const string InvalidPriority = nameof(InvalidPriority);
        /// <summary>The minimum priority must be less than or equal to the maximum priority.</summary>
        internal const string InvalidPriorityRangeOrder = nameof(InvalidPriorityRangeOrder);
        /// <summary>Cannot perform requested operation because the Dispatcher shut down.</summary>
        internal const string DispatcherHasShutdown = nameof(DispatcherHasShutdown);
        /// <summary>A thread cannot wait on operations already running on the same thread.</summary>
        internal const string ThreadMayNotWaitOnOperationsAlreadyExecutingOnTheSameThread = nameof(ThreadMayNotWaitOnOperationsAlreadyExecutingOnTheSameThread);
        /// <summary>The calling thread cannot access this object because a different thread owns it.</summary>
        internal const string VerifyAccess = nameof(VerifyAccess);
        /// <summary>Objects must be created by the same thread.</summary>
        internal const string MismatchedDispatchers = nameof(MismatchedDispatchers);
        /// <summary>Dispatcher processing has been suspended, but messages are still being processed.</summary>
        internal const string DispatcherProcessingDisabledButStillPumping = nameof(DispatcherProcessingDisabledButStillPumping);
        /// <summary>Cannot perform this operation while dispatcher processing is suspended.</summary>
        internal const string DispatcherProcessingDisabled = nameof(DispatcherProcessingDisabled);
        /// <summary>The DispatcherPriorityAwaiter was not configured with a valid Dispatcher.  The only supported usage is from Dispatcher.Yield.</summary>
        internal const string DispatcherPriorityAwaiterInvalid = nameof(DispatcherPriorityAwaiterInvalid);
        /// <summary>The thread calling Dispatcher.Yield does not have a current Dispatcher.</summary>
        internal const string DispatcherYieldNoAvailableDispatcher = nameof(DispatcherYieldNoAvailableDispatcher);
        /// <summary>The Dispatcher is unable to request processing.  This is often because the application has starved the Dispatcher's message pump.</summary>
        internal const string DispatcherRequestProcessingFailed = nameof(DispatcherRequestProcessingFailed);
        /// <summary>Exception Filter Code is not built and installed properly.</summary>
        internal const string ExceptionFilterCodeNotPresent = nameof(ExceptionFilterCodeNotPresent);
        /// <summary>Unrecognized ModifierKeys '{0}'.</summary>
        internal const string Unsupported_Modifier = nameof(Unsupported_Modifier);
        /// <summary>TimeSpan period must be greater than or equal to zero.</summary>
        internal const string TimeSpanPeriodOutOfRange_TooSmall = nameof(TimeSpanPeriodOutOfRange_TooSmall);
        /// <summary>TimeSpan period must be less than or equal to Int32.MaxValue.</summary>
        internal const string TimeSpanPeriodOutOfRange_TooLarge = nameof(TimeSpanPeriodOutOfRange_TooLarge);
        /// <summary>Cannot clear properties on object '{0}' because it is in a read-only state.</summary>
        internal const string ClearOnReadOnlyObjectNotAllowed = nameof(ClearOnReadOnlyObjectNotAllowed);
        /// <summary>Cannot automatically generate a valid default value for property '{0}'. Specify a default value explicitly when owner type '{1}' is registering this DependencyProperty.</summary>
        internal const string DefaultValueAutoAssignFailed = nameof(DefaultValueAutoAssignFailed);
        /// <summary>An Expression object is not a valid default value for a DependencyProperty.</summary>
        internal const string DefaultValueMayNotBeExpression = nameof(DefaultValueMayNotBeExpression);
        /// <summary>Default value cannot be 'Unset'.</summary>
        internal const string DefaultValueMayNotBeUnset = nameof(DefaultValueMayNotBeUnset);
        /// <summary>Default value for the '{0}' property cannot be bound to a specific thread.</summary>
        internal const string DefaultValueMustBeFreeThreaded = nameof(DefaultValueMustBeFreeThreaded);
        /// <summary>Default value type does not match type of property '{0}'.</summary>
        internal const string DefaultValuePropertyTypeMismatch = nameof(DefaultValuePropertyTypeMismatch);
        /// <summary>Default value for '{0}' property is not valid because ValidateValueCallback failed.</summary>
        internal const string DefaultValueInvalid = nameof(DefaultValueInvalid);
        /// <summary>'{0}' type does not have a matching DependencyObjectType.</summary>
        internal const string DTypeNotSupportForSystemType = nameof(DTypeNotSupportForSystemType);
        /// <summary>'{0}' is not a valid value for property '{1}'.</summary>
        internal const string InvalidPropertyValue = nameof(InvalidPropertyValue);
        /// <summary>Local value enumeration position is out of range.</summary>
        internal const string LocalValueEnumerationOutOfBounds = nameof(LocalValueEnumerationOutOfBounds);
        /// <summary>Local value enumeration position is before the start, need to call MoveNext first.</summary>
        internal const string LocalValueEnumerationReset = nameof(LocalValueEnumerationReset);
        /// <summary>Current local value enumeration is outdated because one or more local values have been set since its creation.</summary>
        internal const string LocalValueEnumerationInvalidated = nameof(LocalValueEnumerationInvalidated);
        /// <summary>Default value factory user must override PropertyMetadata.CreateDefaultValue.</summary>
        internal const string MissingCreateDefaultValue = nameof(MissingCreateDefaultValue);
        /// <summary>Metadata override and base metadata must be of the same type or derived type.</summary>
        internal const string OverridingMetadataDoesNotMatchBaseMetadataType = nameof(OverridingMetadataDoesNotMatchBaseMetadataType);
        /// <summary>'{0}' property was already registered by '{1}'.</summary>
        internal const string PropertyAlreadyRegistered = nameof(PropertyAlreadyRegistered);
        /// <summary>This method overrides metadata only on read-only properties. This property is not read-only.</summary>
        internal const string PropertyNotReadOnly = nameof(PropertyNotReadOnly);
        /// <summary>'{0}' property was registered as read-only and cannot be modified without an authorization key.</summary>
        internal const string ReadOnlyChangeNotAllowed = nameof(ReadOnlyChangeNotAllowed);
        /// <summary>Property key is not authorized to modify property '{0}'.</summary>
        internal const string ReadOnlyKeyNotAuthorized = nameof(ReadOnlyKeyNotAuthorized);
        /// <summary>'{0}' property was registered as read-only and its metadata cannot be overridden without an authorization key.</summary>
        internal const string ReadOnlyOverrideNotAllowed = nameof(ReadOnlyOverrideNotAllowed);
        /// <summary>Property key is not authorized to override metadata of property '{0}'.</summary>
        internal const string ReadOnlyOverrideKeyNotAuthorized = nameof(ReadOnlyOverrideKeyNotAuthorized);
        /// <summary>'{0}' is registered as read-only, so its value cannot be coerced by using the DesignerCoerceValueCallback.</summary>
        internal const string ReadOnlyDesignerCoersionNotAllowed = nameof(ReadOnlyDesignerCoersionNotAllowed);
        /// <summary>Cannot set a property on object '{0}' because it is in a read-only state.</summary>
        internal const string SetOnReadOnlyObjectNotAllowed = nameof(SetOnReadOnlyObjectNotAllowed);
        /// <summary>Shareable Expression cannot use ChangeSources method.</summary>
        internal const string ShareableExpressionsCannotChangeSources = nameof(ShareableExpressionsCannotChangeSources);
        /// <summary>Cannot set Expression. It is marked as 'NonShareable' and has already been used.</summary>
        internal const string SharingNonSharableExpression = nameof(SharingNonSharableExpression);
        /// <summary>ShouldSerializeProperty and ResetProperty methods must be public ('{0}').</summary>
        internal const string SpecialMethodMustBePublic = nameof(SpecialMethodMustBePublic);
        /// <summary>Must create DependencySource on same Thread as the DependencyObject.</summary>
        internal const string SourcesMustBeInSameThread = nameof(SourcesMustBeInSameThread);
        /// <summary>Expression is not in use on DependencyObject. Cannot change DependencySource array.</summary>
        internal const string SourceChangeExpressionMismatch = nameof(SourceChangeExpressionMismatch);
        /// <summary>DependencyProperty limit has been exceeded upon registration of '{0}'. Dependency properties are normally static class members registered with static field initializers or static constructors. In this case, there may be dependency properties accidentally g ...</summary>
        internal const string TooManyDependencyProperties = nameof(TooManyDependencyProperties);
        /// <summary>Metadata is already associated with a type and property. A new one must be created.</summary>
        internal const string TypeMetadataAlreadyInUse = nameof(TypeMetadataAlreadyInUse);
        /// <summary>PropertyMetadata is already registered for type '{0}'.</summary>
        internal const string TypeMetadataAlreadyRegistered = nameof(TypeMetadataAlreadyRegistered);
        /// <summary>'{0}' type must derive from DependencyObject.</summary>
        internal const string TypeMustBeDependencyObjectDerived = nameof(TypeMustBeDependencyObjectDerived);
        /// <summary>Unrecognized Expression 'Mode' value.</summary>
        internal const string UnknownExpressionMode = nameof(UnknownExpressionMode);
        /// <summary>Buffer is too small to accommodate the specified parameters.</summary>
        internal const string BufferTooSmall = nameof(BufferTooSmall);
        /// <summary>Buffer offset cannot be negative.</summary>
        internal const string BufferOffsetNegative = nameof(BufferOffsetNegative);
        /// <summary>CompoundFile path must be non-empty.</summary>
        internal const string CompoundFilePathNullEmpty = nameof(CompoundFilePathNullEmpty);
        /// <summary>Cannot create new package on a read-only stream.</summary>
        internal const string CanNotCreateContainerOnReadOnlyStream = nameof(CanNotCreateContainerOnReadOnlyStream);
        /// <summary>Cannot create a read-only stream.</summary>
        internal const string CanNotCreateAsReadOnly = nameof(CanNotCreateAsReadOnly);
        /// <summary>Cannot create a stream in a read-only package.</summary>
        internal const string CanNotCreateInReadOnly = nameof(CanNotCreateInReadOnly);
        /// <summary>Cannot create StorageRoot on a nonreadable stream.</summary>
        internal const string CanNotCreateStorageRootOnNonReadableStream = nameof(CanNotCreateStorageRootOnNonReadableStream);
        /// <summary>Cannot delete element.</summary>
        internal const string CanNotDelete = nameof(CanNotDelete);
        /// <summary>Cannot delete element because access is denied.</summary>
        internal const string CanNotDeleteAccessDenied = nameof(CanNotDeleteAccessDenied);
        /// <summary>Cannot create data storage because access is denied.</summary>
        internal const string CanNotCreateAccessDenied = nameof(CanNotCreateAccessDenied);
        /// <summary>Cannot delete read-only packages.</summary>
        internal const string CanNotDeleteInReadOnly = nameof(CanNotDeleteInReadOnly);
        /// <summary>Cannot delete because the storage is not empty. Try a recursive delete with Delete(true).</summary>
        internal const string CanNotDeleteNonEmptyStorage = nameof(CanNotDeleteNonEmptyStorage);
        /// <summary>Cannot delete the root StorageInfo.</summary>
        internal const string CanNotDeleteRoot = nameof(CanNotDeleteRoot);
        /// <summary>Cannot perform this function on a storage that does not exist.</summary>
        internal const string CanNotOnNonExistStorage = nameof(CanNotOnNonExistStorage);
        /// <summary>Cannot open data storage.</summary>
        internal const string CanNotOpenStorage = nameof(CanNotOpenStorage);
        /// <summary>Cannot find specified package file.</summary>
        internal const string ContainerNotFound = nameof(ContainerNotFound);
        /// <summary>Cannot open specified package file.</summary>
        internal const string ContainerCanNotOpen = nameof(ContainerCanNotOpen);
        /// <summary>Create mode parameter must be either FileMode.Create or FileMode.Open.</summary>
        internal const string CreateModeMustBeCreateOrOpen = nameof(CreateModeMustBeCreateOrOpen);
        /// <summary>Compound File API failure.</summary>
        internal const string CFAPIFailure = nameof(CFAPIFailure);
        /// <summary>The given data space label name is already in use.</summary>
        internal const string DataSpaceLabelInUse = nameof(DataSpaceLabelInUse);
        /// <summary>Empty string is not a valid data space label.</summary>
        internal const string DataSpaceLabelInvalidEmpty = nameof(DataSpaceLabelInvalidEmpty);
        /// <summary>Specified data space label has not been defined.</summary>
        internal const string DataSpaceLabelUndefined = nameof(DataSpaceLabelUndefined);
        /// <summary>DataSpaceManager object was disposed.</summary>
        internal const string DataSpaceManagerDisposed = nameof(DataSpaceManagerDisposed);
        /// <summary>DataSpace map entry is not valid.</summary>
        internal const string DataSpaceMapEntryInvalid = nameof(DataSpaceMapEntryInvalid);
        /// <summary>FileAccess value is not valid.</summary>
        internal const string FileAccessInvalid = nameof(FileAccessInvalid);
        /// <summary>File already exists.</summary>
        internal const string FileAlreadyExists = nameof(FileAlreadyExists);
        /// <summary>FileMode value is not supported.</summary>
        internal const string FileModeUnsupported = nameof(FileModeUnsupported);
        /// <summary>FileMode value is not valid.</summary>
        internal const string FileModeInvalid = nameof(FileModeInvalid);
        /// <summary>FileShare value is not supported.</summary>
        internal const string FileShareUnsupported = nameof(FileShareUnsupported);
        /// <summary>FileShare value is not valid.</summary>
        internal const string FileShareInvalid = nameof(FileShareInvalid);
        /// <summary>Streams for exposure as ILockBytes must be seekable.</summary>
        internal const string ILockBytesStreamMustSeek = nameof(ILockBytesStreamMustSeek);
        /// <summary>'{1}' is not a valid value for '{0}'.</summary>
        internal const string InvalidArgumentValue = nameof(InvalidArgumentValue);
        /// <summary>Cannot locate information for stream that should exist. This is an internally inconsistent condition.</summary>
        internal const string InvalidCondition01 = nameof(InvalidCondition01);
        /// <summary>String format is not valid.</summary>
        internal const string InvalidStringFormat = nameof(InvalidStringFormat);
        /// <summary>Internal table type value is not valid. This is an internally inconsistent condition.</summary>
        internal const string InvalidTableType = nameof(InvalidTableType);
        /// <summary>MoveTo Destination storage does not exist.</summary>
        internal const string MoveToDestNotExist = nameof(MoveToDestNotExist);
        /// <summary>IStorage/IStream::MoveTo not supported.</summary>
        internal const string MoveToNYI = nameof(MoveToNYI);
        /// <summary>'{0}' name is already in use.</summary>
        internal const string NameAlreadyInUse = nameof(NameAlreadyInUse);
        /// <summary>'{0}' cannot contain the path delimiter: '{1}'.</summary>
        internal const string NameCanNotHaveDelimiter = nameof(NameCanNotHaveDelimiter);
        /// <summary>Failed call to '{0}'.</summary>
        internal const string NamedAPIFailure = nameof(NamedAPIFailure);
        /// <summary>Name table data is corrupt in data storage.</summary>
        internal const string NameTableCorruptStg = nameof(NameTableCorruptStg);
        /// <summary>Name table data is corrupt in memory.</summary>
        internal const string NameTableCorruptMem = nameof(NameTableCorruptMem);
        /// <summary>Name table cannot be read by this version of the program.</summary>
        internal const string NameTableVersionMismatchRead = nameof(NameTableVersionMismatchRead);
        /// <summary>Name table cannot be updated by this version of the program.</summary>
        internal const string NameTableVersionMismatchWrite = nameof(NameTableVersionMismatchWrite);
        /// <summary>This feature is not supported.</summary>
        internal const string NYIDefault = nameof(NYIDefault);
        /// <summary>Path string cannot include an empty element.</summary>
        internal const string PathHasEmptyElement = nameof(PathHasEmptyElement);
        /// <summary>Count of bytes to read cannot be negative.</summary>
        internal const string ReadCountNegative = nameof(ReadCountNegative);
        /// <summary>Cannot seek to given position.</summary>
        internal const string SeekFailed = nameof(SeekFailed);
        /// <summary>Cannot set seek pointer to a negative position.</summary>
        internal const string SeekNegative = nameof(SeekNegative);
        /// <summary>SeekOrigin value is not valid.</summary>
        internal const string SeekOriginInvalid = nameof(SeekOriginInvalid);
        /// <summary>This combination of flags is not supported.</summary>
        internal const string StorageFlagsUnsupported = nameof(StorageFlagsUnsupported);
        /// <summary>Storage already exists.</summary>
        internal const string StorageAlreadyExist = nameof(StorageAlreadyExist);
        /// <summary>Stream already exists.</summary>
        internal const string StreamAlreadyExist = nameof(StreamAlreadyExist);
        /// <summary>StorageInfo object was disposed.</summary>
        internal const string StorageInfoDisposed = nameof(StorageInfoDisposed);
        /// <summary>Storage does not exist.</summary>
        internal const string StorageNotExist = nameof(StorageNotExist);
        /// <summary>StorageRoot object was disposed.</summary>
        internal const string StorageRootDisposed = nameof(StorageRootDisposed);
        /// <summary>StreamInfo object was disposed.</summary>
        internal const string StreamInfoDisposed = nameof(StreamInfoDisposed);
        /// <summary>Stream length cannot be negative.</summary>
        internal const string StreamLengthNegative = nameof(StreamLengthNegative);
        /// <summary>Cannot perform this function on a stream that does not exist.</summary>
        internal const string StreamNotExist = nameof(StreamNotExist);
        /// <summary>Stream name cannot be '{0}'.</summary>
        internal const string StreamNameNotValid = nameof(StreamNameNotValid);
        /// <summary>Stream time stamp not implemented in OLE32 implementation of Compound Files.</summary>
        internal const string StreamTimeStampNotImplemented = nameof(StreamTimeStampNotImplemented);
        /// <summary>'{0}' cannot start with the reserved character range 0x01-0x1F.</summary>
        internal const string StringCanNotBeReservedName = nameof(StringCanNotBeReservedName);
        /// <summary>Requested time stamp is not available.</summary>
        internal const string TimeStampNotAvailable = nameof(TimeStampNotAvailable);
        /// <summary>Transform label name is already in use.</summary>
        internal const string TransformLabelInUse = nameof(TransformLabelInUse);
        /// <summary>Data space transform stack includes undefined transform labels.</summary>
        internal const string TransformLabelUndefined = nameof(TransformLabelUndefined);
        /// <summary>Transform object type is required to have a constructor which takes a TransformEnvironment object.</summary>
        internal const string TransformObjectConstructorParam = nameof(TransformObjectConstructorParam);
        /// <summary>Transform object type is required to implement IDataTransform interface.</summary>
        internal const string TransformObjectImplementIDataTransform = nameof(TransformObjectImplementIDataTransform);
        /// <summary>Stream transformation failed due to uninitialized data transform objects.</summary>
        internal const string TransformObjectInitFailed = nameof(TransformObjectInitFailed);
        /// <summary>Transform identifier type is not supported.</summary>
        internal const string TransformTypeUnsupported = nameof(TransformTypeUnsupported);
        /// <summary>Transform stack must have at least one transform.</summary>
        internal const string TransformStackValid = nameof(TransformStackValid);
        /// <summary>Cannot create package on stream.</summary>
        internal const string UnableToCreateOnStream = nameof(UnableToCreateOnStream);
        /// <summary>Cannot create data storage.</summary>
        internal const string UnableToCreateStorage = nameof(UnableToCreateStorage);
        /// <summary>Cannot create data stream.</summary>
        internal const string UnableToCreateStream = nameof(UnableToCreateStream);
        /// <summary>Cannot open data stream.</summary>
        internal const string UnableToOpenStream = nameof(UnableToOpenStream);
        /// <summary>Encountered unsupported type of storage element when building storage enumerator.</summary>
        internal const string UnsupportedTypeEncounteredWhenBuildingStgEnum = nameof(UnsupportedTypeEncounteredWhenBuildingStgEnum);
        /// <summary>Cannot write all data as specified.</summary>
        internal const string WriteFailure = nameof(WriteFailure);
        /// <summary>Write-only mode is not supported.</summary>
        internal const string WriteOnlyUnsupported = nameof(WriteOnlyUnsupported);
        /// <summary>Cannot write a negative number of bytes.</summary>
        internal const string WriteSizeNegative = nameof(WriteSizeNegative);
        /// <summary>Object metadata stream in the package is corrupt and the content is not valid.</summary>
        internal const string CFM_CorruptMetadataStream = nameof(CFM_CorruptMetadataStream);
        /// <summary>Object metadata stream in the package is corrupt and the root tag is not valid.</summary>
        internal const string CFM_CorruptMetadataStream_Root = nameof(CFM_CorruptMetadataStream_Root);
        /// <summary>Object metadata stream in the package is corrupt with duplicated key tags.</summary>
        internal const string CFM_CorruptMetadataStream_DuplicateKey = nameof(CFM_CorruptMetadataStream_DuplicateKey);
        /// <summary>Object used as metadata key must be an instance of the CompoundFileMetadataKey class.</summary>
        internal const string CFM_ObjectMustBeCompoundFileMetadataKey = nameof(CFM_ObjectMustBeCompoundFileMetadataKey);
        /// <summary>Cannot perform this operation when the package is in read-only mode.</summary>
        internal const string CFM_ReadOnlyContainer = nameof(CFM_ReadOnlyContainer);
        /// <summary>Failed to read a stream type table - the data appears to be a different format.</summary>
        internal const string CFM_TypeTableFormat = nameof(CFM_TypeTableFormat);
        /// <summary>Unicode character is not valid.</summary>
        internal const string CFM_UnicodeCharInvalid = nameof(CFM_UnicodeCharInvalid);
        /// <summary>Only strings can be used as value.</summary>
        internal const string CFM_ValueMustBeString = nameof(CFM_ValueMustBeString);
        /// <summary>XML character is not valid.</summary>
        internal const string CFM_XMLCharInvalid = nameof(CFM_XMLCharInvalid);
        /// <summary>Cannot compare different types.</summary>
        internal const string CanNotCompareDiffTypes = nameof(CanNotCompareDiffTypes);
        /// <summary>CompoundFileReference: Corrupted CompoundFileReference.</summary>
        internal const string CFRCorrupt = nameof(CFRCorrupt);
        /// <summary>CompoundFileReference: Corrupted CompoundFileReference - multiple stream components found.</summary>
        internal const string CFRCorruptMultiStream = nameof(CFRCorruptMultiStream);
        /// <summary>CompoundFileReference: Corrupted CompoundFileReference - storage component cannot follow stream component.</summary>
        internal const string CFRCorruptStgFollowStm = nameof(CFRCorruptStgFollowStm);
        /// <summary>Cannot have leading path delimiter.</summary>
        internal const string DelimiterLeading = nameof(DelimiterLeading);
        /// <summary>Cannot have trailing path delimiter.</summary>
        internal const string DelimiterTrailing = nameof(DelimiterTrailing);
        /// <summary>Offset must be greater than or equal to zero.</summary>
        internal const string OffsetNegative = nameof(OffsetNegative);
        /// <summary>Unrecognized reference component type.</summary>
        internal const string UnknownReferenceComponentType = nameof(UnknownReferenceComponentType);
        /// <summary>Cannot serialize unknown CompoundFileReference subclass.</summary>
        internal const string UnknownReferenceSerialize = nameof(UnknownReferenceSerialize);
        /// <summary>CompoundFileReference: malformed path encountered.</summary>
        internal const string MalformedCompoundFilePath = nameof(MalformedCompoundFilePath);
        /// <summary>Stream length cannot be negative.</summary>
        internal const string CannotMakeStreamLengthNegative = nameof(CannotMakeStreamLengthNegative);
        /// <summary>Stream operation failed because stream is corrupted.</summary>
        internal const string CorruptStream = nameof(CorruptStream);
        /// <summary>Stream does not support Length property.</summary>
        internal const string LengthNotSupported = nameof(LengthNotSupported);
        /// <summary>Buffer too small to hold results of Read.</summary>
        internal const string ReadBufferTooSmall = nameof(ReadBufferTooSmall);
        /// <summary>Stream does not support reading.</summary>
        internal const string ReadNotSupported = nameof(ReadNotSupported);
        /// <summary>Stream does not support Seek.</summary>
        internal const string SeekNotSupported = nameof(SeekNotSupported);
        /// <summary>Stream does not support SetLength.</summary>
        internal const string SetLengthNotSupported = nameof(SetLengthNotSupported);
        /// <summary>Stream does not support setting the Position property.</summary>
        internal const string SetPositionNotSupported = nameof(SetPositionNotSupported);
        /// <summary>Negative stream position not supported.</summary>
        internal const string StreamPositionNegative = nameof(StreamPositionNegative);
        /// <summary>Cannot change Transform parameters after the transform is initialized.</summary>
        internal const string TransformParametersFixed = nameof(TransformParametersFixed);
        /// <summary>Buffer of bytes to be written is too small.</summary>
        internal const string WriteBufferTooSmall = nameof(WriteBufferTooSmall);
        /// <summary>Count of bytes to write cannot be negative.</summary>
        internal const string WriteCountNegative = nameof(WriteCountNegative);
        /// <summary>Stream does not support writing.</summary>
        internal const string WriteNotSupported = nameof(WriteNotSupported);
        /// <summary>Compression requires ZLib library version {0}.</summary>
        internal const string ZLibVersionError = nameof(ZLibVersionError);
        /// <summary>Expected a VersionPair object.</summary>
        internal const string ExpectedVersionPairObject = nameof(ExpectedVersionPairObject);
        /// <summary>Major and minor version number components cannot be negative.</summary>
        internal const string VersionNumberComponentNegative = nameof(VersionNumberComponentNegative);
        /// <summary>Feature ID string cannot have zero length.</summary>
        internal const string ZeroLengthFeatureID = nameof(ZeroLengthFeatureID);
        /// <summary>Cannot find version stream.</summary>
        internal const string VersionStreamMissing = nameof(VersionStreamMissing);
        /// <summary>Cannot update version because of a version field size mismatch.</summary>
        internal const string VersionUpdateFailure = nameof(VersionUpdateFailure);
        /// <summary>Cannot remove signature from read-only file.</summary>
        internal const string CannotRemoveSignatureFromReadOnlyFile = nameof(CannotRemoveSignatureFromReadOnlyFile);
        /// <summary>Cannot sign read-only file.</summary>
        internal const string CannotSignReadOnlyFile = nameof(CannotSignReadOnlyFile);
        /// <summary>Cannot locate the selected digital certificate.</summary>
        internal const string DigSigCannotLocateCertificate = nameof(DigSigCannotLocateCertificate);
        /// <summary>Certificate error. Multiple certificates found with the same thumbprint.</summary>
        internal const string DigSigDuplicateCertificate = nameof(DigSigDuplicateCertificate);
        /// <summary>Digital Signature</summary>
        internal const string CertSelectionDialogTitle = nameof(CertSelectionDialogTitle);
        /// <summary>Select a certificate</summary>
        internal const string CertSelectionDialogMessage = nameof(CertSelectionDialogMessage);
        /// <summary>Duplicates not allowed - signature part already exists.</summary>
        internal const string DuplicateSignature = nameof(DuplicateSignature);
        /// <summary>Error parsing XML Signature.</summary>
        internal const string XmlSignatureParseError = nameof(XmlSignatureParseError);
        /// <summary>Required attribute '{0}' not found.</summary>
        internal const string RequiredXmlAttributeMissing = nameof(RequiredXmlAttributeMissing);
        /// <summary>Unexpected tag '{0}'.</summary>
        internal const string UnexpectedXmlTag = nameof(UnexpectedXmlTag);
        /// <summary>Required tag '{0}' not found.</summary>
        internal const string RequiredTagNotFound = nameof(RequiredTagNotFound);
        /// <summary>Required Package-specific Object tag is missing.</summary>
        internal const string PackageSignatureObjectTagRequired = nameof(PackageSignatureObjectTagRequired);
        /// <summary>Required Package-specific Reference tag is missing.</summary>
        internal const string PackageSignatureReferenceTagRequired = nameof(PackageSignatureReferenceTagRequired);
        /// <summary>Expected exactly one Package-specific Reference tag.</summary>
        internal const string MoreThanOnePackageSpecificReference = nameof(MoreThanOnePackageSpecificReference);
        /// <summary>Uri attribute in Reference tag must refer using fragment identifiers.</summary>
        internal const string InvalidUriAttribute = nameof(InvalidUriAttribute);
        /// <summary>Cannot countersign an unsigned package.</summary>
        internal const string NoCounterSignUnsignedContainer = nameof(NoCounterSignUnsignedContainer);
        /// <summary>Time format string is not valid.</summary>
        internal const string BadSignatureTimeFormatString = nameof(BadSignatureTimeFormatString);
        /// <summary>Signature structures are corrupted in this package.</summary>
        internal const string PackageSignatureCorruption = nameof(PackageSignatureCorruption);
        /// <summary>Unsupported hash algorithm specified.</summary>
        internal const string UnsupportedHashAlgorithm = nameof(UnsupportedHashAlgorithm);
        /// <summary>Relationship transform must be followed by an XML canonicalization transform.</summary>
        internal const string RelationshipTransformNotFollowedByCanonicalizationTransform = nameof(RelationshipTransformNotFollowedByCanonicalizationTransform);
        /// <summary>There must be at most one relationship transform specified for a given relationship part.</summary>
        internal const string MultipleRelationshipTransformsFound = nameof(MultipleRelationshipTransformsFound);
        /// <summary>Unsupported transform algorithm specified.</summary>
        internal const string UnsupportedTransformAlgorithm = nameof(UnsupportedTransformAlgorithm);
        /// <summary>Unsupported canonicalization method specified.</summary>
        internal const string UnsupportedCanonicalizationMethod = nameof(UnsupportedCanonicalizationMethod);
        /// <summary>Reusable hash algorithm must be specified.</summary>
        internal const string HashAlgorithmMustBeReusable = nameof(HashAlgorithmMustBeReusable);
        /// <summary>Malformed Part URI in Reference tag.</summary>
        internal const string PartReferenceUriMalformed = nameof(PartReferenceUriMalformed);
        /// <summary>Relationship was found to the signature origin but the part is missing. Package signature structures are corrupted.</summary>
        internal const string SignatureOriginNotFound = nameof(SignatureOriginNotFound);
        /// <summary>Multiple signature origin relationships found.</summary>
        internal const string MultipleSignatureOrigins = nameof(MultipleSignatureOrigins);
        /// <summary>Must specify an item to sign.</summary>
        internal const string NothingToSign = nameof(NothingToSign);
        /// <summary>Signature Identifier cannot be empty.</summary>
        internal const string EmptySignatureId = nameof(EmptySignatureId);
        /// <summary>Signature was deleted.</summary>
        internal const string SignatureDeleted = nameof(SignatureDeleted);
        /// <summary>Specified object ID conflicts with predefined Package Object ID.</summary>
        internal const string SignaturePackageObjectTagMustBeUnique = nameof(SignaturePackageObjectTagMustBeUnique);
        /// <summary>Specified reference object conflicts with predefined Package specific reference.</summary>
        internal const string PackageSpecificReferenceTagMustBeUnique = nameof(PackageSpecificReferenceTagMustBeUnique);
        /// <summary>Object identifiers must be unique within the same signature.</summary>
        internal const string SignatureObjectIdMustBeUnique = nameof(SignatureObjectIdMustBeUnique);
        /// <summary>Can only countersign parts with Digital Signature ContentType.</summary>
        internal const string CanOnlyCounterSignSignatureParts = nameof(CanOnlyCounterSignSignatureParts);
        /// <summary>Certificate part is not of the correct type.</summary>
        internal const string CertificatePartContentTypeMismatch = nameof(CertificatePartContentTypeMismatch);
        /// <summary>Signing certificate must be of type DSA or RSA.</summary>
        internal const string CertificateKeyTypeNotSupported = nameof(CertificateKeyTypeNotSupported);
        /// <summary>Specified part to sign does not exist.</summary>
        internal const string PartToSignMissing = nameof(PartToSignMissing);
        /// <summary>Duplicate object ID found. IDs must be unique within the signature XML.</summary>
        internal const string DuplicateObjectId = nameof(DuplicateObjectId);
        /// <summary>Caller-supplied parameter to callback function is not of expected type.</summary>
        internal const string CallbackParameterInvalid = nameof(CallbackParameterInvalid);
        /// <summary>Cannot change publish license after the rights management transform settings are fixed.</summary>
        internal const string CannotChangePublishLicense = nameof(CannotChangePublishLicense);
        /// <summary>Cannot change CryptoProvider after the rights management transform settings are fixed.</summary>
        internal const string CannotChangeCryptoProvider = nameof(CannotChangeCryptoProvider);
        /// <summary>Length prefix specifies {0} characters, which exceeds the maximum of {1} characters.</summary>
        internal const string ExcessiveLengthPrefix = nameof(ExcessiveLengthPrefix);
        /// <summary>OLE property ID {0} cannot be read (error {1}).</summary>
        internal const string GetOlePropertyFailed = nameof(GetOlePropertyFailed);
        /// <summary>Authentication type string (the part before the colon) is not valid in user ID '{0}'.</summary>
        internal const string InvalidAuthenticationTypeString = nameof(InvalidAuthenticationTypeString);
        /// <summary>'{0}' document property type is not valid.</summary>
        internal const string InvalidDocumentPropertyType = nameof(InvalidDocumentPropertyType);
        /// <summary>'{0}' document property variant type is not valid.</summary>
        internal const string InvalidDocumentPropertyVariantType = nameof(InvalidDocumentPropertyVariantType);
        /// <summary>User ID in use license stream is not of the form "authenticationType:userName".</summary>
        internal const string InvalidTypePrefixedUserName = nameof(InvalidTypePrefixedUserName);
        /// <summary>Feature name in the transform's primary stream is '{0}', but expected '{1}'.</summary>
        internal const string InvalidTransformFeatureName = nameof(InvalidTransformFeatureName);
        /// <summary>Document does not contain a package.</summary>
        internal const string PackageNotFound = nameof(PackageNotFound);
        /// <summary>File does not contain a stream to hold the publish license.</summary>
        internal const string NoPublishLicenseStream = nameof(NoPublishLicenseStream);
        /// <summary>File does not contain a storage to hold use licenses.</summary>
        internal const string NoUseLicenseStorage = nameof(NoUseLicenseStorage);
        /// <summary>File contains data in format version {0}, but the software can only read that data in format version {1} or lower.</summary>
        internal const string ReaderVersionError = nameof(ReaderVersionError);
        /// <summary>Document's publish license stream is corrupted.</summary>
        internal const string PublishLicenseStreamCorrupt = nameof(PublishLicenseStreamCorrupt);
        /// <summary>Document does not contain a publish license.</summary>
        internal const string PublishLicenseNotFound = nameof(PublishLicenseNotFound);
        /// <summary>Document does not contain any rights management-protected streams.</summary>
        internal const string RightsManagementEncryptionTransformNotFound = nameof(RightsManagementEncryptionTransformNotFound);
        /// <summary>Document contains multiple Rights Management Encryption Transforms.</summary>
        internal const string MultipleRightsManagementEncryptionTransformFound = nameof(MultipleRightsManagementEncryptionTransformFound);
        /// <summary>The stream on which the encrypted package is created must have read/write access.</summary>
        internal const string StreamNeedsReadWriteAccess = nameof(StreamNeedsReadWriteAccess);
        /// <summary>Cannot perform stream operation because CryptoProvider is not set to allow decryption.</summary>
        internal const string CryptoProviderCanNotDecrypt = nameof(CryptoProviderCanNotDecrypt);
        /// <summary>Only cryptographic providers based on a block cipher are supported.</summary>
        internal const string CryptoProviderCanNotMergeBlocks = nameof(CryptoProviderCanNotMergeBlocks);
        /// <summary>EncryptedPackageEnvelope object was disposed.</summary>
        internal const string EncryptedPackageEnvelopeDisposed = nameof(EncryptedPackageEnvelopeDisposed);
        /// <summary>CryptoProvider object was disposed.</summary>
        internal const string CryptoProviderDisposed = nameof(CryptoProviderDisposed);
        /// <summary>File contains data in format version {0}, but the software can only update that data in format version {1} or lower.</summary>
        internal const string UpdaterVersionError = nameof(UpdaterVersionError);
        /// <summary>The dictionary is read-only.</summary>
        internal const string DictionaryIsReadOnly = nameof(DictionaryIsReadOnly);
        /// <summary>The CryptoProvider cannot encrypt or decrypt.</summary>
        internal const string CryptoProviderIsNotReady = nameof(CryptoProviderIsNotReady);
        /// <summary>One of the document's use licenses is corrupted.</summary>
        internal const string UseLicenseStreamCorrupt = nameof(UseLicenseStreamCorrupt);
        /// <summary>Encrypted data stream is corrupted.</summary>
        internal const string EncryptedDataStreamCorrupt = nameof(EncryptedDataStreamCorrupt);
        /// <summary>Unrecognized document property: FMTID = '{0}', property ID = '{1}'.</summary>
        internal const string UnknownDocumentProperty = nameof(UnknownDocumentProperty);
        /// <summary>'{0}' document property in property set '{1}' is of incorrect variant type '{2}'. Expected type '{3}'.</summary>
        internal const string WrongDocumentPropertyVariantType = nameof(WrongDocumentPropertyVariantType);
        /// <summary>User is not activated.</summary>
        internal const string UserIsNotActivated = nameof(UserIsNotActivated);
        /// <summary>User does not have a client licensor certificate.</summary>
        internal const string UserHasNoClientLicensorCert = nameof(UserHasNoClientLicensorCert);
        /// <summary>Encryption right is not granted.</summary>
        internal const string EncryptionRightIsNotGranted = nameof(EncryptionRightIsNotGranted);
        /// <summary>Decryption right is not granted.</summary>
        internal const string DecryptionRightIsNotGranted = nameof(DecryptionRightIsNotGranted);
        /// <summary>CryptoProvider does not have privileges required for decryption of the PublishLicense.</summary>
        internal const string NoPrivilegesForPublishLicenseDecryption = nameof(NoPrivilegesForPublishLicenseDecryption);
        /// <summary>Signed Publish License is not valid.</summary>
        internal const string InvalidPublishLicense = nameof(InvalidPublishLicense);
        /// <summary>Variable-length header in publish license stream is {0} bytes, which exceeds the maximum length of {1} bytes.</summary>
        internal const string PublishLicenseStreamHeaderTooLong = nameof(PublishLicenseStreamHeaderTooLong);
        /// <summary>User must be either Windows or Passport authenticated. Other authentication types are not allowed in this context.</summary>
        internal const string OnlyPassportOrWindowsAuthenticatedUsersAreAllowed = nameof(OnlyPassportOrWindowsAuthenticatedUsersAreAllowed);
        /// <summary>Rights management operation failed.</summary>
        internal const string RmExceptionGenericMessage = nameof(RmExceptionGenericMessage);
        /// <summary>License is not valid.</summary>
        internal const string RmExceptionInvalidLicense = nameof(RmExceptionInvalidLicense);
        /// <summary>Information not found.</summary>
        internal const string RmExceptionInfoNotInLicense = nameof(RmExceptionInfoNotInLicense);
        /// <summary>License signature is not valid.</summary>
        internal const string RmExceptionInvalidLicenseSignature = nameof(RmExceptionInvalidLicenseSignature);
        /// <summary>Encryption not permitted.</summary>
        internal const string RmExceptionEncryptionNotPermitted = nameof(RmExceptionEncryptionNotPermitted);
        /// <summary>Right not granted.</summary>
        internal const string RmExceptionRightNotGranted = nameof(RmExceptionRightNotGranted);
        /// <summary>Version is not valid.</summary>
        internal const string RmExceptionInvalidVersion = nameof(RmExceptionInvalidVersion);
        /// <summary>Encoding type is not valid.</summary>
        internal const string RmExceptionInvalidEncodingType = nameof(RmExceptionInvalidEncodingType);
        /// <summary>Numerical value is not valid.</summary>
        internal const string RmExceptionInvalidNumericalValue = nameof(RmExceptionInvalidNumericalValue);
        /// <summary>Algorithm type is not valid.</summary>
        internal const string RmExceptionInvalidAlgorithmType = nameof(RmExceptionInvalidAlgorithmType);
        /// <summary>Environment not loaded.</summary>
        internal const string RmExceptionEnvironmentNotLoaded = nameof(RmExceptionEnvironmentNotLoaded);
        /// <summary>Cannot load environment.</summary>
        internal const string RmExceptionEnvironmentCannotLoad = nameof(RmExceptionEnvironmentCannotLoad);
        /// <summary>Cannot load more than one environment.</summary>
        internal const string RmExceptionTooManyLoadedEnvironments = nameof(RmExceptionTooManyLoadedEnvironments);
        /// <summary>Incompatible objects.</summary>
        internal const string RmExceptionIncompatibleObjects = nameof(RmExceptionIncompatibleObjects);
        /// <summary>Library fail.</summary>
        internal const string RmExceptionLibraryFail = nameof(RmExceptionLibraryFail);
        /// <summary>Enabling principal failure.</summary>
        internal const string RmExceptionEnablingPrincipalFailure = nameof(RmExceptionEnablingPrincipalFailure);
        /// <summary>Information not found.</summary>
        internal const string RmExceptionInfoNotPresent = nameof(RmExceptionInfoNotPresent);
        /// <summary>Get information query is not valid.</summary>
        internal const string RmExceptionBadGetInfoQuery = nameof(RmExceptionBadGetInfoQuery);
        /// <summary>Key type not supported.</summary>
        internal const string RmExceptionKeyTypeUnsupported = nameof(RmExceptionKeyTypeUnsupported);
        /// <summary>Crypto operation not supported.</summary>
        internal const string RmExceptionCryptoOperationUnsupported = nameof(RmExceptionCryptoOperationUnsupported);
        /// <summary>Clock rollback detected.</summary>
        internal const string RmExceptionClockRollbackDetected = nameof(RmExceptionClockRollbackDetected);
        /// <summary>Query reports no results.</summary>
        internal const string RmExceptionQueryReportsNoResults = nameof(RmExceptionQueryReportsNoResults);
        /// <summary>Unexpected exception.</summary>
        internal const string RmExceptionUnexpectedException = nameof(RmExceptionUnexpectedException);
        /// <summary>Binding validity time violated.</summary>
        internal const string RmExceptionBindValidityTimeViolated = nameof(RmExceptionBindValidityTimeViolated);
        /// <summary>Broken certificate chain.</summary>
        internal const string RmExceptionBrokenCertChain = nameof(RmExceptionBrokenCertChain);
        /// <summary>Binding policy violation.</summary>
        internal const string RmExceptionBindPolicyViolation = nameof(RmExceptionBindPolicyViolation);
        /// <summary>Manifest policy violation.</summary>
        internal const string RmExceptionManifestPolicyViolation = nameof(RmExceptionManifestPolicyViolation);
        /// <summary>License has been revoked.</summary>
        internal const string RmExceptionBindRevokedLicense = nameof(RmExceptionBindRevokedLicense);
        /// <summary>Issuer has been revoked.</summary>
        internal const string RmExceptionBindRevokedIssuer = nameof(RmExceptionBindRevokedIssuer);
        /// <summary>Principal has been revoked.</summary>
        internal const string RmExceptionBindRevokedPrincipal = nameof(RmExceptionBindRevokedPrincipal);
        /// <summary>Resource has been revoked.</summary>
        internal const string RmExceptionBindRevokedResource = nameof(RmExceptionBindRevokedResource);
        /// <summary>Module has been revoked.</summary>
        internal const string RmExceptionBindRevokedModule = nameof(RmExceptionBindRevokedModule);
        /// <summary>Binding content not in the End Use License.</summary>
        internal const string RmExceptionBindContentNotInEndUseLicense = nameof(RmExceptionBindContentNotInEndUseLicense);
        /// <summary>Binding access principal is not enabling.</summary>
        internal const string RmExceptionBindAccessPrincipalNotEnabling = nameof(RmExceptionBindAccessPrincipalNotEnabling);
        /// <summary>Binding access unsatisfied.</summary>
        internal const string RmExceptionBindAccessUnsatisfied = nameof(RmExceptionBindAccessUnsatisfied);
        /// <summary>Principal provided for binding is missing.</summary>
        internal const string RmExceptionBindIndicatedPrincipalMissing = nameof(RmExceptionBindIndicatedPrincipalMissing);
        /// <summary>Machine is not found in group identity certificate.</summary>
        internal const string RmExceptionBindMachineNotFoundInGroupIdentity = nameof(RmExceptionBindMachineNotFoundInGroupIdentity);
        /// <summary>Unsupported library plug-in.</summary>
        internal const string RmExceptionLibraryUnsupportedPlugIn = nameof(RmExceptionLibraryUnsupportedPlugIn);
        /// <summary>Binding revocation list is stale.</summary>
        internal const string RmExceptionBindRevocationListStale = nameof(RmExceptionBindRevocationListStale);
        /// <summary>Binding missing application revocation list.</summary>
        internal const string RmExceptionBindNoApplicableRevocationList = nameof(RmExceptionBindNoApplicableRevocationList);
        /// <summary>Handle is not valid.</summary>
        internal const string RmExceptionInvalidHandle = nameof(RmExceptionInvalidHandle);
        /// <summary>Binding time interval is violated.</summary>
        internal const string RmExceptionBindIntervalTimeViolated = nameof(RmExceptionBindIntervalTimeViolated);
        /// <summary>Binding cannot find a satisfied rights group.</summary>
        internal const string RmExceptionBindNoSatisfiedRightsGroup = nameof(RmExceptionBindNoSatisfiedRightsGroup);
        /// <summary>Cannot find content specified for binding.</summary>
        internal const string RmExceptionBindSpecifiedWorkMissing = nameof(RmExceptionBindSpecifiedWorkMissing);
        /// <summary>No more data.</summary>
        internal const string RmExceptionNoMoreData = nameof(RmExceptionNoMoreData);
        /// <summary>License acquisition failed.</summary>
        internal const string RmExceptionLicenseAcquisitionFailed = nameof(RmExceptionLicenseAcquisitionFailed);
        /// <summary>ID mismatch.</summary>
        internal const string RmExceptionIdMismatch = nameof(RmExceptionIdMismatch);
        /// <summary>Cannot have more than one certificate.</summary>
        internal const string RmExceptionTooManyCertificates = nameof(RmExceptionTooManyCertificates);
        /// <summary>Distribution Point URL was not set.</summary>
        internal const string RmExceptionNoDistributionPointUrlFound = nameof(RmExceptionNoDistributionPointUrlFound);
        /// <summary>Rights management server transaction already in progress.</summary>
        internal const string RmExceptionAlreadyInProgress = nameof(RmExceptionAlreadyInProgress);
        /// <summary>Group identity not set.</summary>
        internal const string RmExceptionGroupIdentityNotSet = nameof(RmExceptionGroupIdentityNotSet);
        /// <summary>Record not found.</summary>
        internal const string RmExceptionRecordNotFound = nameof(RmExceptionRecordNotFound);
        /// <summary>Connection failed.</summary>
        internal const string RmExceptionNoConnect = nameof(RmExceptionNoConnect);
        /// <summary>License not found.</summary>
        internal const string RmExceptionNoLicense = nameof(RmExceptionNoLicense);
        /// <summary>Machine must be activated.</summary>
        internal const string RmExceptionNeedsMachineActivation = nameof(RmExceptionNeedsMachineActivation);
        /// <summary>User identity must be activated.</summary>
        internal const string RmExceptionNeedsGroupIdentityActivation = nameof(RmExceptionNeedsGroupIdentityActivation);
        /// <summary>Activation failed.</summary>
        internal const string RmExceptionActivationFailed = nameof(RmExceptionActivationFailed);
        /// <summary>Command interrupted.</summary>
        internal const string RmExceptionAborted = nameof(RmExceptionAborted);
        /// <summary>Transaction quota exceeded.</summary>
        internal const string RmExceptionOutOfQuota = nameof(RmExceptionOutOfQuota);
        /// <summary>Authentication failed.</summary>
        internal const string RmExceptionAuthenticationFailed = nameof(RmExceptionAuthenticationFailed);
        /// <summary>Server side error.</summary>
        internal const string RmExceptionServerError = nameof(RmExceptionServerError);
        /// <summary>Installation failed.</summary>
        internal const string RmExceptionInstallationFailed = nameof(RmExceptionInstallationFailed);
        /// <summary>Hardware ID corrupted.</summary>
        internal const string RmExceptionHidCorrupted = nameof(RmExceptionHidCorrupted);
        /// <summary>Server response is not valid.</summary>
        internal const string RmExceptionInvalidServerResponse = nameof(RmExceptionInvalidServerResponse);
        /// <summary>Service not found.</summary>
        internal const string RmExceptionServiceNotFound = nameof(RmExceptionServiceNotFound);
        /// <summary>Use default.</summary>
        internal const string RmExceptionUseDefault = nameof(RmExceptionUseDefault);
        /// <summary>Server not found.</summary>
        internal const string RmExceptionServerNotFound = nameof(RmExceptionServerNotFound);
        /// <summary>E-mail address is not valid.</summary>
        internal const string RmExceptionInvalidEmail = nameof(RmExceptionInvalidEmail);
        /// <summary>License validity time violation.</summary>
        internal const string RmExceptionValidityTimeViolation = nameof(RmExceptionValidityTimeViolation);
        /// <summary>Outdated module.</summary>
        internal const string RmExceptionOutdatedModule = nameof(RmExceptionOutdatedModule);
        /// <summary>Service moved.</summary>
        internal const string RmExceptionServiceMoved = nameof(RmExceptionServiceMoved);
        /// <summary>Service gone.</summary>
        internal const string RmExceptionServiceGone = nameof(RmExceptionServiceGone);
        /// <summary>Ad entry not found.</summary>
        internal const string RmExceptionAdEntryNotFound = nameof(RmExceptionAdEntryNotFound);
        /// <summary>Not a certificate chain.</summary>
        internal const string RmExceptionNotAChain = nameof(RmExceptionNotAChain);
        /// <summary>Rights management server denied request.</summary>
        internal const string RmExceptionRequestDenied = nameof(RmExceptionRequestDenied);
        /// <summary>Not set.</summary>
        internal const string RmExceptionNotSet = nameof(RmExceptionNotSet);
        /// <summary>Metadata not set.</summary>
        internal const string RmExceptionMetadataNotSet = nameof(RmExceptionMetadataNotSet);
        /// <summary>Revocation information not set.</summary>
        internal const string RmExceptionRevocationInfoNotSet = nameof(RmExceptionRevocationInfoNotSet);
        /// <summary>Time information is not valid.</summary>
        internal const string RmExceptionInvalidTimeInfo = nameof(RmExceptionInvalidTimeInfo);
        /// <summary>Right not set.</summary>
        internal const string RmExceptionRightNotSet = nameof(RmExceptionRightNotSet);
        /// <summary>License binding to Windows Identity failed (NTLM bind failure).</summary>
        internal const string RmExceptionLicenseBindingToWindowsIdentityFailed = nameof(RmExceptionLicenseBindingToWindowsIdentityFailed);
        /// <summary>Issuance license template is not valid because of incorrectly formatted string.</summary>
        internal const string RmExceptionInvalidIssuanceLicenseTemplate = nameof(RmExceptionInvalidIssuanceLicenseTemplate);
        /// <summary>Key size length is not valid.</summary>
        internal const string RmExceptionInvalidKeyLength = nameof(RmExceptionInvalidKeyLength);
        /// <summary>Expired official Publish License template.</summary>
        internal const string RmExceptionExpiredOfficialIssuanceLicenseTemplate = nameof(RmExceptionExpiredOfficialIssuanceLicenseTemplate);
        /// <summary>Client Licensor Certificate is not valid.</summary>
        internal const string RmExceptionInvalidClientLicensorCertificate = nameof(RmExceptionInvalidClientLicensorCertificate);
        /// <summary>Hardware ID is not valid.</summary>
        internal const string RmExceptionHidInvalid = nameof(RmExceptionHidInvalid);
        /// <summary>E-mail not verified.</summary>
        internal const string RmExceptionEmailNotVerified = nameof(RmExceptionEmailNotVerified);
        /// <summary>Debugger detected.</summary>
        internal const string RmExceptionDebuggerDetected = nameof(RmExceptionDebuggerDetected);
        /// <summary>Lockbox type is not valid.</summary>
        internal const string RmExceptionInvalidLockboxType = nameof(RmExceptionInvalidLockboxType);
        /// <summary>Lockbox path is not valid.</summary>
        internal const string RmExceptionInvalidLockboxPath = nameof(RmExceptionInvalidLockboxPath);
        /// <summary>Registry path is not valid.</summary>
        internal const string RmExceptionInvalidRegistryPath = nameof(RmExceptionInvalidRegistryPath);
        /// <summary>No AES Crypto provider found.</summary>
        internal const string RmExceptionNoAesCryptoProvider = nameof(RmExceptionNoAesCryptoProvider);
        /// <summary>Global option is already set.</summary>
        internal const string RmExceptionGlobalOptionAlreadySet = nameof(RmExceptionGlobalOptionAlreadySet);
        /// <summary>Owner's license not found.</summary>
        internal const string RmExceptionOwnerLicenseNotFound = nameof(RmExceptionOwnerLicenseNotFound);
        /// <summary>Archive file cannot be size 0.</summary>
        internal const string ZipZeroSizeFileIsNotValidArchive = nameof(ZipZeroSizeFileIsNotValidArchive);
        /// <summary>Cannot perform a write operation in read-only mode.</summary>
        internal const string CanNotWriteInReadOnlyMode = nameof(CanNotWriteInReadOnlyMode);
        /// <summary>Cannot perform a read operation in write-only mode.</summary>
        internal const string CanNotReadInWriteOnlyMode = nameof(CanNotReadInWriteOnlyMode);
        /// <summary>Cannot perform a read/write operation in write-only or read-only modes.</summary>
        internal const string CanNotReadWriteInReadOnlyWriteOnlyMode = nameof(CanNotReadWriteInReadOnlyWriteOnlyMode);
        /// <summary>Cannot create file because the specified file name is already in use.</summary>
        internal const string AttemptedToCreateDuplicateFileName = nameof(AttemptedToCreateDuplicateFileName);
        /// <summary>Cannot find specified file.</summary>
        internal const string FileDoesNotExists = nameof(FileDoesNotExists);
        /// <summary>Truncate and Append FileModes are not supported.</summary>
        internal const string TruncateAppendModesNotSupported = nameof(TruncateAppendModesNotSupported);
        /// <summary>Only FileShare.Read and FileShare.None are supported.</summary>
        internal const string OnlyFileShareReadAndFileShareNoneSupported = nameof(OnlyFileShareReadAndFileShareNoneSupported);
        /// <summary>Cannot read data from stream that does not support reading.</summary>
        internal const string CanNotReadDataFromStreamWhichDoesNotSupportReading = nameof(CanNotReadDataFromStreamWhichDoesNotSupportReading);
        /// <summary>Cannot write data to stream that does not support writing.</summary>
        internal const string CanNotWriteDataToStreamWhichDoesNotSupportWriting = nameof(CanNotWriteDataToStreamWhichDoesNotSupportWriting);
        /// <summary>Cannot operate on stream that does not support seeking.</summary>
        internal const string CanNotOperateOnStreamWhichDoesNotSupportSeeking = nameof(CanNotOperateOnStreamWhichDoesNotSupportSeeking);
        /// <summary>Cannot get stream with FileMode.Create, FileMode.CreateNew, FileMode.Truncate, FileMode.Append when access is FileAccess.Read.</summary>
        internal const string UnsupportedCombinationOfModeAccessShareStreaming = nameof(UnsupportedCombinationOfModeAccessShareStreaming);
        /// <summary>File contains corrupted data.</summary>
        internal const string CorruptedData = nameof(CorruptedData);
        /// <summary>Multidisk ZIP format is not supported.</summary>
        internal const string NotSupportedMultiDisk = nameof(NotSupportedMultiDisk);
        /// <summary>ZIP archive was closed and disposed.</summary>
        internal const string ZipArchiveDisposed = nameof(ZipArchiveDisposed);
        /// <summary>ZIP file was closed, disposed, or deleted.</summary>
        internal const string ZipFileItemDisposed = nameof(ZipFileItemDisposed);
        /// <summary>ZIP archive contains unsupported data structures.</summary>
        internal const string NotSupportedVersionNeededToExtract = nameof(NotSupportedVersionNeededToExtract);
        /// <summary>ZIP archive contains data structures too large to fit in memory.</summary>
        internal const string Zip64StructuresTooLarge = nameof(Zip64StructuresTooLarge);
        /// <summary>ZIP archive contains unsupported encrypted data.</summary>
        internal const string ZipNotSupportedEncryptedArchive = nameof(ZipNotSupportedEncryptedArchive);
        /// <summary>ZIP archive contains unsupported signature data.</summary>
        internal const string ZipNotSupportedSignedArchive = nameof(ZipNotSupportedSignedArchive);
        /// <summary>ZIP archive contains data compressed using an unsupported algorithm.</summary>
        internal const string ZipNotSupportedCompressionMethod = nameof(ZipNotSupportedCompressionMethod);
        /// <summary>Compressed part has inconsistent data length.</summary>
        internal const string CompressLengthMismatch = nameof(CompressLengthMismatch);
        /// <summary>CreateNew is not a valid FileMode for a nonempty stream.</summary>
        internal const string CreateNewOnNonEmptyStream = nameof(CreateNewOnNonEmptyStream);
        /// <summary>Specified part does not exist in the package.</summary>
        internal const string PartDoesNotExist = nameof(PartDoesNotExist);
        /// <summary>Cannot add part for the specified URI because it is already in the package.</summary>
        internal const string PartAlreadyExists = nameof(PartAlreadyExists);
        /// <summary>Cannot add part to the package. Part names cannot be derived from another part name by appending segments to it.</summary>
        internal const string PartNamePrefixExists = nameof(PartNamePrefixExists);
        /// <summary>Cannot open package because FileMode or FileAccess value is not valid for the stream.</summary>
        internal const string IncompatibleModeOrAccess = nameof(IncompatibleModeOrAccess);
        /// <summary>Cannot be an absolute URI.</summary>
        internal const string URIShouldNotBeAbsolute = nameof(URIShouldNotBeAbsolute);
        /// <summary>Must have absolute URI.</summary>
        internal const string UriShouldBeAbsolute = nameof(UriShouldBeAbsolute);
        /// <summary>FileMode/FileAccess for Part.GetStream is not compatible with FileMode/FileAccess used to open the Package.</summary>
        internal const string ContainerAndPartModeIncompatible = nameof(ContainerAndPartModeIncompatible);
        /// <summary>Cannot get stream with FileMode.Create, FileMode.CreateNew, FileMode.Truncate, FileMode.Append when access is FileAccess.Read.</summary>
        internal const string UnsupportedCombinationOfModeAccess = nameof(UnsupportedCombinationOfModeAccess);
        /// <summary>Returned stream for the part is null.</summary>
        internal const string NullStreamReturned = nameof(NullStreamReturned);
        /// <summary>Package object was closed and disposed, so cannot carry out operations on this object or any stream opened on a part of this package.</summary>
        internal const string ObjectDisposed = nameof(ObjectDisposed);
        /// <summary>Cannot write to read-only stream.</summary>
        internal const string ReadOnlyStream = nameof(ReadOnlyStream);
        /// <summary>Cannot read from write-only stream.</summary>
        internal const string WriteOnlyStream = nameof(WriteOnlyStream);
        /// <summary>Cannot access part because parent package was closed.</summary>
        internal const string ParentContainerClosed = nameof(ParentContainerClosed);
        /// <summary>Part was deleted.</summary>
        internal const string PackagePartDeleted = nameof(PackagePartDeleted);
        /// <summary>PackageRelationship cannot target another PackageRelationship.</summary>
        internal const string RelationshipToRelationshipIllegal = nameof(RelationshipToRelationshipIllegal);
        /// <summary>PackageRelationship parts cannot have relationships to other parts.</summary>
        internal const string RelationshipPartsCannotHaveRelationships = nameof(RelationshipPartsCannotHaveRelationships);
        /// <summary>Incorrect content type for PackageRelationship part.</summary>
        internal const string RelationshipPartIncorrectContentType = nameof(RelationshipPartIncorrectContentType);
        /// <summary>PackageRelationship with specified ID does not exist at the Package level.</summary>
        internal const string PackageRelationshipDoesNotExist = nameof(PackageRelationshipDoesNotExist);
        /// <summary>PackageRelationship with specified ID does not exist for the source part.</summary>
        internal const string PackagePartRelationshipDoesNotExist = nameof(PackagePartRelationshipDoesNotExist);
        /// <summary>PackageRelationship target must be relative URI if TargetMode is Internal.</summary>
        internal const string RelationshipTargetMustBeRelative = nameof(RelationshipTargetMustBeRelative);
        /// <summary>Relationship tag requires attribute '{0}'.</summary>
        internal const string RequiredRelationshipAttributeMissing = nameof(RequiredRelationshipAttributeMissing);
        /// <summary>Relationship tag contains incorrect attribute.</summary>
        internal const string RelationshipTagDoesntMatchSchema = nameof(RelationshipTagDoesntMatchSchema);
        /// <summary>Relationships tag has extra attributes.</summary>
        internal const string RelationshipsTagHasExtraAttributes = nameof(RelationshipsTagHasExtraAttributes);
        /// <summary>Unrecognized tag found in Relationships XML.</summary>
        internal const string UnknownTagEncountered = nameof(UnknownTagEncountered);
        /// <summary>Relationships tag expected at root level.</summary>
        internal const string ExpectedRelationshipsElementTag = nameof(ExpectedRelationshipsElementTag);
        /// <summary>Relationships XML elements cannot specify attribute '{0}'.</summary>
        internal const string InvalidXmlBaseAttributePresent = nameof(InvalidXmlBaseAttributePresent);
        /// <summary>'{0}' ID conflicts with the ID of an existing relationship for the specified source.</summary>
        internal const string NotAUniqueRelationshipId = nameof(NotAUniqueRelationshipId);
        /// <summary>'{0}' ID is not a valid XSD ID.</summary>
        internal const string NotAValidXmlIdString = nameof(NotAValidXmlIdString);
        /// <summary>'{0}' attribute value is not valid.</summary>
        internal const string InvalidValueForTheAttribute = nameof(InvalidValueForTheAttribute);
        /// <summary>Relationship Type cannot contain only spaces or be empty.</summary>
        internal const string InvalidRelationshipType = nameof(InvalidRelationshipType);
        /// <summary>Part URI must start with a forward slash.</summary>
        internal const string PartUriShouldStartWithForwardSlash = nameof(PartUriShouldStartWithForwardSlash);
        /// <summary>Part URI cannot end with a forward slash.</summary>
        internal const string PartUriShouldNotEndWithForwardSlash = nameof(PartUriShouldNotEndWithForwardSlash);
        /// <summary>URI must contain pack:// scheme.</summary>
        internal const string UriShouldBePackScheme = nameof(UriShouldBePackScheme);
        /// <summary>Part URI is empty.</summary>
        internal const string PartUriIsEmpty = nameof(PartUriIsEmpty);
        /// <summary>Part URI is not valid per rules defined in the Open Packaging Conventions specification.</summary>
        internal const string InvalidPartUri = nameof(InvalidPartUri);
        /// <summary>PackageRelationship part URI is not expected.</summary>
        internal const string RelationshipPartUriNotExpected = nameof(RelationshipPartUriNotExpected);
        /// <summary>PackageRelationship part URI is expected.</summary>
        internal const string RelationshipPartUriExpected = nameof(RelationshipPartUriExpected);
        /// <summary>PackageRelationship part URI syntax is not valid.</summary>
        internal const string NotAValidRelationshipPartUri = nameof(NotAValidRelationshipPartUri);
        /// <summary>The 'fragment' parameter must start with a number sign.</summary>
        internal const string FragmentMustStartWithHash = nameof(FragmentMustStartWithHash);
        /// <summary>Part URI cannot contain a Fragment component.</summary>
        internal const string PartUriCannotHaveAFragment = nameof(PartUriCannotHaveAFragment);
        /// <summary>Part URI cannot start with two forward slashes.</summary>
        internal const string PartUriShouldNotStartWithTwoForwardSlashes = nameof(PartUriShouldNotStartWithTwoForwardSlashes);
        /// <summary>Package URI obtained from the pack URI cannot contain a Fragment.</summary>
        internal const string InnerPackageUriHasFragment = nameof(InnerPackageUriHasFragment);
        /// <summary>Cannot access Stream object because it was closed or disposed.</summary>
        internal const string StreamObjectDisposed = nameof(StreamObjectDisposed);
        /// <summary>GetContentTypeCore method cannot return null for the content type stream.</summary>
        internal const string NullContentTypeProvided = nameof(NullContentTypeProvided);
        /// <summary>PackagePart subclass must implement GetContentTypeCore method if passing a null value for the content type when PackagePart object is constructed.</summary>
        internal const string GetContentTypeCoreNotImplemented = nameof(GetContentTypeCoreNotImplemented);
        /// <summary>'{0}' tag requires attribute '{1}'.</summary>
        internal const string RequiredAttributeMissing = nameof(RequiredAttributeMissing);
        /// <summary>'{0}' tag requires a nonempty '{1}' attribute.</summary>
        internal const string RequiredAttributeEmpty = nameof(RequiredAttributeEmpty);
        /// <summary>Types tag has attributes not valid per the schema.</summary>
        internal const string TypesTagHasExtraAttributes = nameof(TypesTagHasExtraAttributes);
        /// <summary>Required Types tag not found.</summary>
        internal const string TypesElementExpected = nameof(TypesElementExpected);
        /// <summary>Content Types XML does not match schema.</summary>
        internal const string TypesXmlDoesNotMatchSchema = nameof(TypesXmlDoesNotMatchSchema);
        /// <summary>Default tag is not valid per the schema. Verify that attributes are correct.</summary>
        internal const string DefaultTagDoesNotMatchSchema = nameof(DefaultTagDoesNotMatchSchema);
        /// <summary>Override tag is not valid per the schema. Verify that attributes are correct.</summary>
        internal const string OverrideTagDoesNotMatchSchema = nameof(OverrideTagDoesNotMatchSchema);
        /// <summary>'{0}' element must be empty.</summary>
        internal const string ElementIsNotEmptyElement = nameof(ElementIsNotEmptyElement);
        /// <summary>Format error in package.</summary>
        internal const string BadPackageFormat = nameof(BadPackageFormat);
        /// <summary>Streaming mode is supported only for creating packages.</summary>
        internal const string StreamingModeNotSupportedForConsumption = nameof(StreamingModeNotSupportedForConsumption);
        /// <summary>Must have write-only access to produce a package in streaming mode.</summary>
        internal const string StreamingPackageProductionImpliesWriteOnlyAccess = nameof(StreamingPackageProductionImpliesWriteOnlyAccess);
        /// <summary>Cannot have concurrent write accesses on package being produced in streaming mode.</summary>
        internal const string StreamingPackageProductionRequiresSingleWriter = nameof(StreamingPackageProductionRequiresSingleWriter);
        /// <summary>'{0}' method can only be called on a package opened in streaming mode.</summary>
        internal const string MethodAvailableOnlyInStreamingCreation = nameof(MethodAvailableOnlyInStreamingCreation);
        /// <summary>Package.{0} is not supported in streaming production.</summary>
        internal const string OperationIsNotSupportedInStreamingProduction = nameof(OperationIsNotSupportedInStreamingProduction);
        /// <summary>Only write operations are supported in streaming production.</summary>
        internal const string OnlyWriteOperationsAreSupportedInStreamingCreation = nameof(OnlyWriteOperationsAreSupportedInStreamingCreation);
        /// <summary>Write-once semantics in streaming production precludes the use of '{0}'.</summary>
        internal const string OperationViolatesWriteOnceSemantics = nameof(OperationViolatesWriteOnceSemantics);
        /// <summary>Streaming consumption of packages not supported.</summary>
        internal const string OnlyStreamingProductionIsSupported = nameof(OnlyStreamingProductionIsSupported);
        /// <summary>Read or write operation references location outside the bounds of the buffer provided.</summary>
        internal const string IOBufferOverflow = nameof(IOBufferOverflow);
        /// <summary>Cannot change content of a read-only stream.</summary>
        internal const string StreamDoesNotSupportWrite = nameof(StreamDoesNotSupportWrite);
        /// <summary>Package has more than one Core Properties relationship.</summary>
        internal const string MoreThanOneMetadataRelationships = nameof(MoreThanOneMetadataRelationships);
        /// <summary>TargetMode for a Core Properties relationship must be 'Internal'.</summary>
        internal const string NoExternalTargetForMetadataRelationship = nameof(NoExternalTargetForMetadataRelationship);
        /// <summary>Unrecognized root element in Core Properties part.</summary>
        internal const string CorePropertiesElementExpected = nameof(CorePropertiesElementExpected);
        /// <summary>Core Properties part: core property elements can contain only text data.</summary>
        internal const string NoStructuredContentInsideProperties = nameof(NoStructuredContentInsideProperties);
        /// <summary>Unrecognized namespace in Core Properties part.</summary>
        internal const string UnknownNamespaceInCorePropertiesPart = nameof(UnknownNamespaceInCorePropertiesPart);
        /// <summary>'{0}' property name is not valid in Core Properties part.</summary>
        internal const string InvalidPropertyNameInCorePropertiesPart = nameof(InvalidPropertyNameInCorePropertiesPart);
        /// <summary>Core Properties part: A property start-tag was expected.</summary>
        internal const string PropertyStartTagExpected = nameof(PropertyStartTagExpected);
        /// <summary>Core Properties part: Text data of XSD type 'DateTime' was expected.</summary>
        internal const string XsdDateTimeExpected = nameof(XsdDateTimeExpected);
        /// <summary>The target of the Core Properties relationship does not reference an existing part.</summary>
        internal const string DanglingMetadataRelationship = nameof(DanglingMetadataRelationship);
        /// <summary>The Core Properties relationship references a part that has an incorrect content type.</summary>
        internal const string WrongContentTypeForPropertyPart = nameof(WrongContentTypeForPropertyPart);
        /// <summary>Unexpected number of attributes is found on '{0}'.</summary>
        internal const string PropertyWrongNumbOfAttribsDefinedOn = nameof(PropertyWrongNumbOfAttribsDefinedOn);
        /// <summary>Unknown xsi:type for DateTime on '{0}'.</summary>
        internal const string UnknownDCDateTimeXsiType = nameof(UnknownDCDateTimeXsiType);
        /// <summary>More than one '{0}' property found.</summary>
        internal const string DuplicateCorePropertyName = nameof(DuplicateCorePropertyName);
        /// <summary>PackageProperties object was disposed.</summary>
        internal const string StorageBasedPackagePropertiesDiposed = nameof(StorageBasedPackagePropertiesDiposed);
        /// <summary>Encoding format is not supported. Only UTF-8 and UTF-16 are supported.</summary>
        internal const string EncodingNotSupported = nameof(EncodingNotSupported);
        /// <summary>Duplicate pieces found in the package.</summary>
        internal const string DuplicatePiecesFound = nameof(DuplicatePiecesFound);
        /// <summary>Cannot find piece with the specified piece number.</summary>
        internal const string PieceDoesNotExist = nameof(PieceDoesNotExist);
        /// <summary>This serviceType is already registered to another service.</summary>
        internal const string ServiceTypeAlreadyAdded = nameof(ServiceTypeAlreadyAdded);
        /// <summary>'{0}' type name does not have the expected format 'className, assembly'.</summary>
        internal const string QualifiedNameHasWrongFormat = nameof(QualifiedNameHasWrongFormat);
        /// <summary>Too many attributes are specified for '{0}'.</summary>
        internal const string ParserAttributeArgsHigh = nameof(ParserAttributeArgsHigh);
        /// <summary>'{0}' requires more attributes.</summary>
        internal const string ParserAttributeArgsLow = nameof(ParserAttributeArgsLow);
        /// <summary>Cannot load assembly '{0}' because a different version of that same assembly is loaded '{1}'.</summary>
        internal const string ParserAssemblyLoadVersionMismatch = nameof(ParserAssemblyLoadVersionMismatch);
        /// <summary>(null)</summary>
        internal const string ToStringNull = nameof(ToStringNull);
        /// <summary>'{0}' ValueSerializer cannot convert '{1}' to '{2}'.</summary>
        internal const string ConvertToException = nameof(ConvertToException);
        /// <summary>'{0}' ValueSerializer cannot convert from '{1}'.</summary>
        internal const string ConvertFromException = nameof(ConvertFromException);
        /// <summary>SortDescription must have a nonempty property name.</summary>
        internal const string SortDescriptionPropertyNameCannotBeEmpty = nameof(SortDescriptionPropertyNameCannotBeEmpty);
        /// <summary>Cannot modify a '{0}' after it is sealed.</summary>
        internal const string CannotChangeAfterSealed = nameof(CannotChangeAfterSealed);
        /// <summary>Cannot group by property '{0}' because it cannot be found on type '{1}'.</summary>
        internal const string BadPropertyForGroup = nameof(BadPropertyForGroup);
        /// <summary>The CollectionView that originates this CurrentChanging event is in a state that does not allow the event to be canceled. Check CurrentChangingEventArgs.IsCancelable before assigning to this CurrentChangingEventArgs.Cancel property.</summary>
        internal const string CurrentChangingCannotBeCanceled = nameof(CurrentChangingCannotBeCanceled);
        /// <summary>Collection is read-only.</summary>
        internal const string NotSupported_ReadOnlyCollection = nameof(NotSupported_ReadOnlyCollection);
        /// <summary>Only single dimensional arrays are supported for the requested action.</summary>
        internal const string Arg_RankMultiDimNotSupported = nameof(Arg_RankMultiDimNotSupported);
        /// <summary>The lower bound of target array must be zero.</summary>
        internal const string Arg_NonZeroLowerBound = nameof(Arg_NonZeroLowerBound);
        /// <summary>Non-negative number required.</summary>
        internal const string ArgumentOutOfRange_NeedNonNegNum = nameof(ArgumentOutOfRange_NeedNonNegNum);
        /// <summary>Destination array is not long enough to copy all the items in the collection. Check array index and length.</summary>
        internal const string Arg_ArrayPlusOffTooSmall = nameof(Arg_ArrayPlusOffTooSmall);
        /// <summary>Target array type is not compatible with the type of items in the collection.</summary>
        internal const string Argument_InvalidArrayType = nameof(Argument_InvalidArrayType);
        /// <summary>'{0}' index is beyond maximum '{1}'.</summary>
        internal const string ReachOutOfRange = nameof(ReachOutOfRange);
        /// <summary>Permission state is not valid.</summary>
        internal const string InvalidPermissionState = nameof(InvalidPermissionState);
        /// <summary>Target is not a WebBrowserPermission.</summary>
        internal const string TargetNotWebBrowserPermissionLevel = nameof(TargetNotWebBrowserPermissionLevel);
        /// <summary>Target is not a MediaPermission.</summary>
        internal const string TargetNotMediaPermissionLevel = nameof(TargetNotMediaPermissionLevel);
        /// <summary>'{0}' attribute is not valid XML.</summary>
        internal const string BadXml = nameof(BadXml);
        /// <summary>Permission level is not valid.</summary>
        internal const string InvalidPermissionLevel = nameof(InvalidPermissionLevel);
        /// <summary>Choice is valid only in AlternateContent.</summary>
        internal const string XCRChoiceOnlyInAC = nameof(XCRChoiceOnlyInAC);
        /// <summary>Choice cannot follow a Fallback.</summary>
        internal const string XCRChoiceAfterFallback = nameof(XCRChoiceAfterFallback);
        /// <summary>Choice must contain Requires attribute.</summary>
        internal const string XCRRequiresAttribNotFound = nameof(XCRRequiresAttribNotFound);
        /// <summary>Requires attribute must contain a valid namespace prefix.</summary>
        internal const string XCRInvalidRequiresAttribute = nameof(XCRInvalidRequiresAttribute);
        /// <summary>Fallback is valid only in AlternateContent.</summary>
        internal const string XCRFallbackOnlyInAC = nameof(XCRFallbackOnlyInAC);
        /// <summary>AlternateContent must contain one or more Choice elements.</summary>
        internal const string XCRChoiceNotFound = nameof(XCRChoiceNotFound);
        /// <summary>AlternateContent must contain only one Fallback element.</summary>
        internal const string XCRMultipleFallbackFound = nameof(XCRMultipleFallbackFound);
        /// <summary>'{0}' attribute is not valid for '{1}' element.</summary>
        internal const string XCRInvalidAttribInElement = nameof(XCRInvalidAttribInElement);
        /// <summary>Unrecognized Compatibility element '{0}'.</summary>
        internal const string XCRUnknownCompatElement = nameof(XCRUnknownCompatElement);
        /// <summary>'{0}' element is not a valid child of AlternateContent. Only Choice and Fallback elements are valid children of an AlternateContent element.</summary>
        internal const string XCRInvalidACChild = nameof(XCRInvalidACChild);
        /// <summary>'{0}' format is not valid.</summary>
        internal const string XCRInvalidFormat = nameof(XCRInvalidFormat);
        /// <summary>'{0}' prefix is not defined.</summary>
        internal const string XCRUndefinedPrefix = nameof(XCRUndefinedPrefix);
        /// <summary>Unrecognized compatibility attribute '{0}'.</summary>
        internal const string XCRUnknownCompatAttrib = nameof(XCRUnknownCompatAttrib);
        /// <summary>'{0}' namespace cannot process content; it must be declared Ignorable first.</summary>
        internal const string XCRNSProcessContentNotIgnorable = nameof(XCRNSProcessContentNotIgnorable);
        /// <summary>Duplicate ProcessContent declaration for element '{1}' in namespace '{0}'.</summary>
        internal const string XCRDuplicateProcessContent = nameof(XCRDuplicateProcessContent);
        /// <summary>Cannot have both a specific and a wildcard ProcessContent declaration for namespace '{0}'.</summary>
        internal const string XCRInvalidProcessContent = nameof(XCRInvalidProcessContent);
        /// <summary>Duplicate wildcard ProcessContent declaration for namespace '{0}'.</summary>
        internal const string XCRDuplicateWildcardProcessContent = nameof(XCRDuplicateWildcardProcessContent);
        /// <summary>MustUnderstand condition failed on namespace '{0}'</summary>
        internal const string XCRMustUnderstandFailed = nameof(XCRMustUnderstandFailed);
        /// <summary>'{0}' namespace cannot preserve items; it must be declared Ignorable first.</summary>
        internal const string XCRNSPreserveNotIgnorable = nameof(XCRNSPreserveNotIgnorable);
        /// <summary>Duplicate Preserve declaration for element {1} in namespace '{0}'.</summary>
        internal const string XCRDuplicatePreserve = nameof(XCRDuplicatePreserve);
        /// <summary>Cannot have both a specific and a wildcard Preserve declaration for namespace '{0}'.</summary>
        internal const string XCRInvalidPreserve = nameof(XCRInvalidPreserve);
        /// <summary>Duplicate wildcard Preserve declaration for namespace '{0}'.</summary>
        internal const string XCRDuplicateWildcardPreserve = nameof(XCRDuplicateWildcardPreserve);
        /// <summary>'{0}' attribute value is not a valid XML name.</summary>
        internal const string XCRInvalidXMLName = nameof(XCRInvalidXMLName);
        /// <summary>There is a cycle of XML compatibility definitions, such that namespace '{0}' overrides itself. This could be due to inconsistent XmlnsCompatibilityAttributes in different assemblies. Please change the definitions to eliminate this cycle.</summary>
        internal const string XCRCompatCycle = nameof(XCRCompatCycle);
        /// <summary>'{1}' event not found on type '{0}'.</summary>
        internal const string EventNotFound = nameof(EventNotFound);
        /// <summary>Listener did not handle requested event.</summary>
        internal const string ListenerDidNotHandleEvent = nameof(ListenerDidNotHandleEvent);
        /// <summary>Listener of type '{0}' registered with event manager of type '{1}', but then did not handle the event. The listener is coded incorrectly.</summary>
        internal const string ListenerDidNotHandleEventDetail = nameof(ListenerDidNotHandleEventDetail);
        /// <summary>WeakEventManager supports only delegates with one target.</summary>
        internal const string NoMulticastHandlers = nameof(NoMulticastHandlers);
        /// <summary>Unrecoverable system error.</summary>
        internal const string InvariantFailure = nameof(InvariantFailure);
        /// <summary>ContentType string cannot have leading/trailing Linear White Spaces [LWS - RFC 2616].</summary>
        internal const string ContentTypeCannotHaveLeadingTrailingLWS = nameof(ContentTypeCannotHaveLeadingTrailingLWS);
        /// <summary>ContentType string is not valid. Expected format is type/subtype.</summary>
        internal const string InvalidTypeSubType = nameof(InvalidTypeSubType);
        /// <summary>';' must be followed by parameter=value pair.</summary>
        internal const string ExpectingParameterValuePairs = nameof(ExpectingParameterValuePairs);
        /// <summary>Parameter and value pair is not valid. Expected form is parameter=value.</summary>
        internal const string InvalidParameterValuePair = nameof(InvalidParameterValuePair);
        /// <summary>A token is not valid. Refer to RFC 2616 for correct grammar of content types.</summary>
        internal const string InvalidToken = nameof(InvalidToken);
        /// <summary>Parameter value must be a valid token or a quoted string as per RFC 2616.</summary>
        internal const string InvalidParameterValue = nameof(InvalidParameterValue);
        /// <summary>A Linear White Space character is not valid.</summary>
        internal const string InvalidLinearWhiteSpaceCharacter = nameof(InvalidLinearWhiteSpaceCharacter);
        /// <summary>Semicolon separator is required between two valid parameter=value pairs.</summary>
        internal const string ExpectingSemicolon = nameof(ExpectingSemicolon);
        /// <summary>HwndSubclass.Attach has already been called;  it cannot be called again.</summary>
        internal const string HwndSubclassMultipleAttach = nameof(HwndSubclassMultipleAttach);
        /// <summary>Cannot locate resource '{0}'.</summary>
        internal const string UnableToLocateResource = nameof(UnableToLocateResource);
        /// <summary>Please wait while the application opens</summary>
        internal const string SplashScreenIsLoading = nameof(SplashScreenIsLoading);
        /// <summary>Name cannot be an empty string.</summary>
        internal const string NameScopeNameNotEmptyString = nameof(NameScopeNameNotEmptyString);
        /// <summary>'{0}' Name is not found.</summary>
        internal const string NameScopeNameNotFound = nameof(NameScopeNameNotFound);
        /// <summary>Cannot register duplicate Name '{0}' in this scope.</summary>
        internal const string NameScopeDuplicateNamesNotAllowed = nameof(NameScopeDuplicateNamesNotAllowed);
        /// <summary>No NameScope found to {1} the Name '{0}'.</summary>
        internal const string NameScopeNotFound = nameof(NameScopeNotFound);
        /// <summary>'{0}' name is not valid for identifier.</summary>
        internal const string NameScopeInvalidIdentifierName = nameof(NameScopeInvalidIdentifierName);
        /// <summary>No dependency property {0} on {1}.</summary>
        internal const string NoDependencyProperty = nameof(NoDependencyProperty);
        /// <summary>Must set ArrayType before calling ProvideValue on ArrayExtension.</summary>
        internal const string MarkupExtensionArrayType = nameof(MarkupExtensionArrayType);
        /// <summary>Items in the array must be type '{0}'. One or more items cannot be cast to this type.</summary>
        internal const string MarkupExtensionArrayBadType = nameof(MarkupExtensionArrayBadType);
        /// <summary>Markup extension '{0}' requires '{1}' be implemented in the IServiceProvider for ProvideValue.</summary>
        internal const string MarkupExtensionNoContext = nameof(MarkupExtensionNoContext);
        /// <summary>'{0}' StaticExtension value cannot be resolved to an enumeration, static field, or static property.</summary>
        internal const string MarkupExtensionBadStatic = nameof(MarkupExtensionBadStatic);
        /// <summary>StaticExtension must have Member property set before ProvideValue can be called.</summary>
        internal const string MarkupExtensionStaticMember = nameof(MarkupExtensionStaticMember);
        /// <summary>TypeExtension must have TypeName property set before ProvideValue can be called.</summary>
        internal const string MarkupExtensionTypeName = nameof(MarkupExtensionTypeName);
        /// <summary>'{0}' string is not valid for type.</summary>
        internal const string MarkupExtensionTypeNameBad = nameof(MarkupExtensionTypeNameBad);
        /// <summary>'{0}' must be of type '{1}'.</summary>
        internal const string MustBeOfType = nameof(MustBeOfType);
        /// <summary>This operation requires the thread's apartment state to be '{0}'.</summary>
        internal const string Verify_ApartmentState = nameof(Verify_ApartmentState);
        /// <summary>The argument can neither be null nor empty.</summary>
        internal const string Verify_NeitherNullNorEmpty = nameof(Verify_NeitherNullNorEmpty);
        /// <summary>The argument can not be equal to '{0}'.</summary>
        internal const string Verify_AreNotEqual = nameof(Verify_AreNotEqual);
        /// <summary>No file exists at '{0}'.</summary>
        internal const string Verify_FileExists = nameof(Verify_FileExists);
        /// <summary>Event argument is invalid.</summary>
        internal const string InvalidEvent = nameof(InvalidEvent);
        /// <summary>The property '{0}' cannot be changed. The '{1}' class has been sealed.</summary>
        internal const string CompatibilityPreferencesSealed = nameof(CompatibilityPreferencesSealed);
        /// <summary>Desktop applications are required to opt in to all earlier accessibility improvements to get the later improvements. To do this, ensure that if the AppContext switch 'Switch.UseLegacyAccessibilityFeatures.N' is set to 'false', then 'Switch.UseLegacyAccessi ...</summary>
        internal const string CombinationOfAccessibilitySwitchesNotSupported = nameof(CombinationOfAccessibilitySwitchesNotSupported);
        /// <summary>Desktop applications setting AppContext switch '{0}' to false are required to opt in to all earlier accessibility improvements. To do this, ensure that the AppContext switch '{1}' is set to 'false', then 'Switch.UseLegacyAccessibilityFeatures' and all 'Swi ...</summary>
        internal const string AccessibilitySwitchDependencyNotSatisfied = nameof(AccessibilitySwitchDependencyNotSatisfied);
        /// <summary>Extra data encountered at position {0} while parsing '{1}'.</summary>
        internal const string TokenizerHelperExtraDataEncountered = nameof(TokenizerHelperExtraDataEncountered);
        /// <summary>Premature string termination encountered while parsing '{0}'.</summary>
        internal const string TokenizerHelperPrematureStringTermination = nameof(TokenizerHelperPrematureStringTermination);
        /// <summary>Missing end quote encountered while parsing '{0}'.</summary>
        internal const string TokenizerHelperMissingEndQuote = nameof(TokenizerHelperMissingEndQuote);
        /// <summary>Empty token encountered at position {0} while parsing '{1}'.</summary>
        internal const string TokenizerHelperEmptyToken = nameof(TokenizerHelperEmptyToken);
        /// <summary>No current object to return.</summary>
        internal const string Enumerator_VerifyContext = nameof(Enumerator_VerifyContext);
        /// <summary>PermissionState value '{0}' is not valid for this Permission.</summary>
        internal const string InvalidPermissionStateValue = nameof(InvalidPermissionStateValue);
        /// <summary>Permission type is not valid. Expected '{0}'.</summary>
        internal const string InvalidPermissionType = nameof(InvalidPermissionType);
        /// <summary>Parameter cannot be a zero-length string.</summary>
        internal const string StringEmpty = nameof(StringEmpty);
        /// <summary>Parameter must be greater than or equal to zero.</summary>
        internal const string ParameterCannotBeNegative = nameof(ParameterCannotBeNegative);
        /// <summary>Specified value of type '{0}' must have IsFrozen set to false to modify.</summary>
        internal const string Freezable_CantBeFrozen = nameof(Freezable_CantBeFrozen);
        /// <summary>Cannot change property metadata after it has been associated with a property.</summary>
        internal const string TypeMetadataCannotChangeAfterUse = nameof(TypeMetadataCannotChangeAfterUse);
        /// <summary>'{0}' enumeration value is not valid.</summary>
        internal const string Enum_Invalid = nameof(Enum_Invalid);
        /// <summary>Cannot convert string value '{0}' to type '{1}'.</summary>
        internal const string CannotConvertStringToType = nameof(CannotConvertStringToType);
        /// <summary>Cannot modify a read-only container.</summary>
        internal const string CannotModifyReadOnlyContainer = nameof(CannotModifyReadOnlyContainer);
        /// <summary>Cannot get part or part information from a write-only container.</summary>
        internal const string CannotRetrievePartsOfWriteOnlyContainer = nameof(CannotRetrievePartsOfWriteOnlyContainer);
        /// <summary>'{0}' file does not conform to the expected file format specification.</summary>
        internal const string FileFormatExceptionWithFileName = nameof(FileFormatExceptionWithFileName);
        /// <summary>Input file or data stream does not conform to the expected file format specification.</summary>
        internal const string FileFormatException = nameof(FileFormatException);
        /// <summary>{0} is an invalid handle.</summary>
        internal const string Cryptography_InvalidHandle = nameof(Cryptography_InvalidHandle);
        /// <summary>DLL Name: {0} DLL Location: {1}</summary>
        internal const string WpfDllConsistencyErrorData = nameof(WpfDllConsistencyErrorData);
        /// <summary>Failed WPF DLL consistency checks. Expected location: {0}.</summary>
        internal const string WpfDllConsistencyErrorHeader = nameof(WpfDllConsistencyErrorHeader);

    }
}
