// <auto-generated>
using System.Reflection;

namespace FxResources.PresentationCore
{
    internal static class SR { }
}
namespace MS.Internal.PresentationCore
{
    internal static partial class SRID 
    {
        private static global::System.Resources.ResourceManager s_resourceManager;
        internal static global::System.Resources.ResourceManager ResourceManager => s_resourceManager ?? (s_resourceManager = new global::System.Resources.ResourceManager(typeof(FxResources.PresentationCore.SR)));
        internal static global::System.Globalization.CultureInfo Culture { get; set; }
#if !NET20
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
#endif
        internal static string GetResourceString(string resourceKey, string defaultValue = null) =>  ResourceManager.GetString(resourceKey, Culture);
        /// <summary>'{0}' is not a single Unicode character.</summary>
        internal const string @AccessKeyManager_NotAUnicodeCharacter = "AccessKeyManager_NotAUnicodeCharacter";
        /// <summary>Text formatting engine cannot acquire break record due to error: '{0}'.</summary>
        internal const string @AcquireBreakRecordFailure = "AcquireBreakRecordFailure";
        /// <summary>Text formatting engine cannot acquire text penalty module due to error: '{0}'.</summary>
        internal const string @AcquirePenaltyModuleFailure = "AcquirePenaltyModuleFailure";
        /// <summary>Cannot add text to '{0}'.</summary>
        internal const string @AddText_Invalid = "AddText_Invalid";
        /// <summary>If AllGestures is specified, it must be the only ApplicationGesture in the ApplicationGesture array.</summary>
        internal const string @AllGesturesMustExistAlone = "AllGesturesMustExistAlone";
        /// <summary>AnimationTimeline of type '{0}' cannot be used to animate the '{1}' property of type '{2}'.</summary>
        internal const string @Animation_AnimationTimelineTypeMismatch = "Animation_AnimationTimelineTypeMismatch";
        /// <summary>The animation(s) applied to the '{0}' property calculate a current value of '{1}', which is not a valid value for the property.</summary>
        internal const string @Animation_CalculatedValueIsInvalidForProperty = "Animation_CalculatedValueIsInvalidForProperty";
        /// <summary>A child of KeyFrameAnimation in XAML must be a KeyFrame of a compatible type.</summary>
        internal const string @Animation_ChildMustBeKeyFrame = "Animation_ChildMustBeKeyFrame";
        /// <summary>One of the animations in the timeline is a '{0}' and cannot be used to animate a property of type '{1}'.</summary>
        internal const string @Animation_ChildTypeMismatch = "Animation_ChildTypeMismatch";
        /// <summary>'{0}' property is not animatable on '{1}' class because the IsAnimationProhibited flag has been set on the UIPropertyMetadata used to associate the property with the class.</summary>
        internal const string @Animation_DependencyPropertyIsNotAnimatable = "Animation_DependencyPropertyIsNotAnimatable";
        /// <summary>Cannot animate the '{0}' property on a '{1}' using a '{2}'. For details see the inner exception.</summary>
        internal const string @Animation_Exception = "Animation_Exception";
        /// <summary>'{0}' is not a valid '{1}' value for class '{2}'. This value might have been supplied by the base value of the property being animated or the output value of another animation applied to the same property.</summary>
        internal const string @Animation_InvalidBaseValue = "Animation_InvalidBaseValue";
        /// <summary>Resolved KeyTime for key frame at index {1} cannot be greater than resolved KeyTime for key frame at index {4}. KeyFrames[{1}] has specified KeyTime '{2}', which resolves to time {3}Animation_InvalidAnimationUsingKeyFramesDuration</summary>
        internal const string @Animation_InvalidResolvedKeyTimes = "Animation_InvalidResolvedKeyTimes";
        /// <summary>'{2}' KeyTime value is not valid for key frame at index {1} of this '{0}' because it is greater than animation's Duration value '{3}'.</summary>
        internal const string @Animation_InvalidTimeKeyTime = "Animation_InvalidTimeKeyTime";
        /// <summary>'{0}' cannot use default {1} value of '{2}'.</summary>
        internal const string @Animation_Invalid_DefaultValue = "Animation_Invalid_DefaultValue";
        /// <summary>Cannot set '{0}' to '{1}'. KeySpline values must be between 0.0 and 1.0.</summary>
        internal const string @Animation_KeySpline_InvalidValue = "Animation_KeySpline_InvalidValue";
        /// <summary>'{0}' is not a valid Percent value for a KeyTime. The Percent value must be a number from 0.0 to 1.0.</summary>
        internal const string @Animation_KeyTime_InvalidPercentValue = "Animation_KeyTime_InvalidPercentValue";
        /// <summary>Cannot create a KeyTime with the value '{0}' because it is less than zero.</summary>
        internal const string @Animation_KeyTime_LessThanZero = "Animation_KeyTime_LessThanZero";
        /// <summary>'{0}' value is not valid because it contains no animations.</summary>
        internal const string @Animation_NoAnimationsSpecified = "Animation_NoAnimationsSpecified";
        /// <summary>KeyFrameAnimation objects cannot have text objects as children.</summary>
        internal const string @Animation_NoTextChildren = "Animation_NoTextChildren";
        /// <summary>A '{0}' on the '{1}' property of a '{2}' returned a current value of UnsetValue.Instance, which is not valid.</summary>
        internal const string @Animation_ReturnedUnsetValueInstance = "Animation_ReturnedUnsetValueInstance";
        /// <summary>The HandoffBehavior value is not valid.</summary>
        internal const string @Animation_UnrecognizedHandoffBehavior = "Animation_UnrecognizedHandoffBehavior";
        /// <summary>This AnimationEffect is already attached to a UIElement.</summary>
        internal const string @AnimEffect_AlreadyAttached = "AnimEffect_AlreadyAttached";
        /// <summary>This AnimationEffectCollection is already being used by another UIElement.</summary>
        internal const string @AnimEffect_CollectionInUse = "AnimEffect_CollectionInUse";
        /// <summary>This AnimationEffect is not attached to a Visual.</summary>
        internal const string @AnimEffect_NoVisual = "AnimEffect_NoVisual";
        /// <summary>The ApplicationGesture array must contain at least one member.</summary>
        internal const string @ApplicationGestureArrayLengthIsZero = "ApplicationGestureArrayLengthIsZero";
        /// <summary>The specified ApplicationGesture is not valid.</summary>
        internal const string @ApplicationGestureIsInvalid = "ApplicationGestureIsInvalid";
        /// <summary>Automation client cannot access UI because application is shutting down.</summary>
        internal const string @AutomationDispatcherShutdown = "AutomationDispatcherShutdown";
        /// <summary>Timeout occurred while attempting to access UI. The application might be busy or unresponsive.</summary>
        internal const string @AutomationTimeout = "AutomationTimeout";
        /// <summary>'{0}' is not a valid System.Windows.Automation.AutomationPeer. It is expected to be associated with a Window known to Automation.</summary>
        internal const string @Automation_InvalidConnectedPeer = "Automation_InvalidConnectedPeer";
        /// <summary>'{0}' is not a valid System.Windows.Automation.AutomationEvent.</summary>
        internal const string @Automation_InvalidEventId = "Automation_InvalidEventId";
        /// <summary>'{0}' is not a valid System.Windows.Automation.SynchronizedInputType.</summary>
        internal const string @Automation_InvalidSynchronizedInputType = "Automation_InvalidSynchronizedInputType";
        /// <summary>Recursive call to Automation Peer API is not valid.</summary>
        internal const string @Automation_RecursivePublicCall = "Automation_RecursivePublicCall";
        /// <summary>Unsupported UI Automation event association.</summary>
        internal const string @Automation_UnsupportedUIAutomationEventAssociation = "Automation_UnsupportedUIAutomationEventAssociation";
        /// <summary>BitmapCacheBrush does not support Opacity.</summary>
        internal const string @BitmapCacheBrush_OpacityChanged = "BitmapCacheBrush_OpacityChanged";
        /// <summary>BitmapCacheBrush does not support RelativeTransform.</summary>
        internal const string @BitmapCacheBrush_RelativeTransformChanged = "BitmapCacheBrush_RelativeTransformChanged";
        /// <summary>BitmapCacheBrush does not support Transform.</summary>
        internal const string @BitmapCacheBrush_TransformChanged = "BitmapCacheBrush_TransformChanged";
        /// <summary>Alt+Left;Backspace</summary>
        internal const string @BrowseBackKeyDisplayString = "BrowseBackKeyDisplayString";
        /// <summary>Back</summary>
        internal const string @BrowseBackText = "BrowseBackText";
        /// <summary>Alt+Right;Shift+Backspace</summary>
        internal const string @BrowseForwardKeyDisplayString = "BrowseForwardKeyDisplayString";
        /// <summary>Forward</summary>
        internal const string @BrowseForwardText = "BrowseForwardText";
        /// <summary>Alt+Home;BrowserHome</summary>
        internal const string @BrowseHomeKeyDisplayString = "BrowseHomeKeyDisplayString";
        /// <summary>Home</summary>
        internal const string @BrowseHomeText = "BrowseHomeText";
        /// <summary>Alt+Esc;BrowserStop</summary>
        internal const string @BrowseStopKeyDisplayString = "BrowseStopKeyDisplayString";
        /// <summary>Stop</summary>
        internal const string @BrowseStopText = "BrowseStopText";
        /// <summary>Unrecognized brush type in BAML file.</summary>
        internal const string @BrushUnknownBamlType = "BrushUnknownBamlType";
        /// <summary>Cannot access a disposed HTTP byte range downloader.</summary>
        internal const string @ByteRangeDownloaderDisposed = "ByteRangeDownloaderDisposed";
        /// <summary>Byte range request failed.</summary>
        internal const string @ByteRangeDownloaderErroredOut = "ByteRangeDownloaderErroredOut";
        /// <summary>Server does not support byte range request.</summary>
        internal const string @ByteRangeRequestIsNotSupported = "ByteRangeRequestIsNotSupported";
        /// <summary>Cancel Print</summary>
        internal const string @CancelPrintText = "CancelPrintText";
        /// <summary>Cannot attach a Visual that is already attached.</summary>
        internal const string @CannotAttachVisualTwice = "CannotAttachVisualTwice";
        /// <summary>'{0}' and '{1}' cannot both be null.</summary>
        internal const string @CannotBothBeNull = "CannotBothBeNull";
        /// <summary>Cannot convert string value '{0}' to type '{1}'.</summary>
        internal const string @CannotConvertStringToType = "CannotConvertStringToType";
        /// <summary>Cannot convert type '{0}' to '{1}'.</summary>
        internal const string @CannotConvertType = "CannotConvertType";
        /// <summary>Cannot modify a read-only container.</summary>
        internal const string @CannotModifyReadOnlyContainer = "CannotModifyReadOnlyContainer";
        /// <summary>Cannot modify the Visual children for this node because a tree walk is in progress.</summary>
        internal const string @CannotModifyVisualChildrenDuringTreeWalk = "CannotModifyVisualChildrenDuringTreeWalk";
        /// <summary>Cannot navigate to application resource '{0}' by using a WebBrowser control. For URI navigation, the resource must be at the application's site of origin. Use the pack://siteoforigin:,,,/ prefix to avoid hard-coding the URI.</summary>
        internal const string @CannotNavigateToApplicationResourcesInWebBrowser = "CannotNavigateToApplicationResourcesInWebBrowser";
        /// <summary>Cannot get part or part information from a write-only container.</summary>
        internal const string @CannotRetrievePartsOfWriteOnlyContainer = "CannotRetrievePartsOfWriteOnlyContainer";
        /// <summary>Cannot read from the specified command buffer pointer.</summary>
        internal const string @Channel_InvalidCommandBufferPointer = "Channel_InvalidCommandBufferPointer";
        /// <summary>The Metrics property of CharacterMetrics is missing a required field.</summary>
        internal const string @CharacterMetrics_MissingRequiredField = "CharacterMetrics_MissingRequiredField";
        /// <summary>CharacterMetrics is not valid. The horizontal advance (defined as the sum of BlackBoxWidth, LeftSideBearing, and RightSideBearing) cannot be negative.</summary>
        internal const string @CharacterMetrics_NegativeHorizontalAdvance = "CharacterMetrics_NegativeHorizontalAdvance";
        /// <summary>CharacterMetrics is not valid. The vertical advance (defined as the sum of BlackBoxHeight, TopSideBearing, and BottomSideBearing) cannot be negative.</summary>
        internal const string @CharacterMetrics_NegativeVerticalAdvance = "CharacterMetrics_NegativeVerticalAdvance";
        /// <summary>The Metrics property of CharacterMetrics has too many fields.</summary>
        internal const string @CharacterMetrics_TooManyFields = "CharacterMetrics_TooManyFields";
        /// <summary>Class handlers can be registered only for UIElement or ContentElement and their subtypes.</summary>
        internal const string @ClassTypeIllegal = "ClassTypeIllegal";
        /// <summary>Text formatting engine cannot clone break record due to error: '{0}'.</summary>
        internal const string @CloneBreakRecordFailure = "CloneBreakRecordFailure";
        /// <summary>Close</summary>
        internal const string @CloseText = "CloseText";
        /// <summary>A cluster map entry must be greater than or equal to a previous entry.</summary>
        internal const string @ClusterMapEntriesShouldNotDecrease = "ClusterMapEntriesShouldNotDecrease";
        /// <summary>A cluster map entry must point to a valid glyph indices element.</summary>
        internal const string @ClusterMapEntryShouldPointWithinGlyphIndices = "ClusterMapEntryShouldPointWithinGlyphIndices";
        /// <summary>The first element in the cluster map must equal zero.</summary>
        internal const string @ClusterMapFirstEntryMustBeZero = "ClusterMapFirstEntryMustBeZero";
        /// <summary>'{0}' character is outside the Unicode code point range.</summary>
        internal const string @CodePointOutOfRange = "CodePointOutOfRange";
        /// <summary>'{0}' key already exists in the collection.</summary>
        internal const string @CollectionDuplicateKey = "CollectionDuplicateKey";
        /// <summary>Collection was modified during enumeration.</summary>
        internal const string @CollectionEnumerationError = "CollectionEnumerationError";
        /// <summary>This collection is fixed size.</summary>
        internal const string @CollectionIsFixedSize = "CollectionIsFixedSize";
        /// <summary>The number of elements in this collection must be greater than zero.</summary>
        internal const string @CollectionNumberOfElementsMustBeGreaterThanZero = "CollectionNumberOfElementsMustBeGreaterThanZero";
        /// <summary>The number of elements in this collection must be less than or equal to '{0}'.</summary>
        internal const string @CollectionNumberOfElementsMustBeLessOrEqualTo = "CollectionNumberOfElementsMustBeLessOrEqualTo";
        /// <summary>The number of elements in this collection should equal '{0}'.</summary>
        internal const string @CollectionNumberOfElementsShouldBeEqualTo = "CollectionNumberOfElementsShouldBeEqualTo";
        /// <summary>Collection accepts only objects of type CommandBinding.</summary>
        internal const string @CollectionOnlyAcceptsCommandBindings = "CollectionOnlyAcceptsCommandBindings";
        /// <summary>Collection accepts only objects of type InputBinding.</summary>
        internal const string @CollectionOnlyAcceptsInputBindings = "CollectionOnlyAcceptsInputBindings";
        /// <summary>Collection accepts only objects of type InputGesture.</summary>
        internal const string @CollectionOnlyAcceptsInputGestures = "CollectionOnlyAcceptsInputGestures";
        /// <summary>Destination array is not compatible with objects within '{0}'.</summary>
        internal const string @Collection_BadDestArray = "Collection_BadDestArray";
        /// <summary>Input array is not a valid rank.</summary>
        internal const string @Collection_BadRank = "Collection_BadRank";
        /// <summary>Cannot add instance of type '{1}' to a collection of type '{0}'. Only items of type '{2}' are allowed.</summary>
        internal const string @Collection_BadType = "Collection_BadType";
        /// <summary>Cannot pass multidimensional array to the CopyTo method on a collection.</summary>
        internal const string @Collection_CopyTo_ArrayCannotBeMultidimensional = "Collection_CopyTo_ArrayCannotBeMultidimensional";
        /// <summary>'{0}' parameter value is equal to or greater than the length of the '{1}' parameter value.</summary>
        internal const string @Collection_CopyTo_IndexGreaterThanOrEqualToArrayLength = "Collection_CopyTo_IndexGreaterThanOrEqualToArrayLength";
        /// <summary>The number of elements in this collection is greater than the available space from '{0}' to the end of destination '{1}'.</summary>
        internal const string @Collection_CopyTo_NumberOfElementsExceedsArrayLength = "Collection_CopyTo_NumberOfElementsExceedsArrayLength";
        /// <summary>Cannot add null to the collection.</summary>
        internal const string @Collection_NoNull = "Collection_NoNull";
        /// <summary>File is too large to be a valid ColorContext.</summary>
        internal const string @ColorContext_FileTooLarge = "ColorContext_FileTooLarge";
        /// <summary>Color context must be sRGB or scRGB for this operation.</summary>
        internal const string @Color_ColorContextNotsRGB_or_scRGB = "Color_ColorContextNotsRGB_or_scRGB";
        /// <summary>Color context types mismatch.</summary>
        internal const string @Color_ColorContextTypeMismatch = "Color_ColorContextTypeMismatch";
        /// <summary>Color context dimensions mismatch.</summary>
        internal const string @Color_DimensionMismatch = "Color_DimensionMismatch";
        /// <summary>Color context is null.</summary>
        internal const string @Color_NullColorContext = "Color_NullColorContext";
        /// <summary>The property '{0}' cannot be changed. The '{1}' class has been sealed.</summary>
        internal const string @CompatibilityPreferencesSealed = "CompatibilityPreferencesSealed";
        /// <summary>Typography properties are not valid.</summary>
        internal const string @CompileFeatureSet_InvalidTypographyProperties = "CompileFeatureSet_InvalidTypographyProperties";
        /// <summary>Invalid value for {0} attribute.</summary>
        internal const string @CompositeFontAttributeValue1 = "CompositeFontAttributeValue1";
        /// <summary>Invalid value for {0} attribute: {1}</summary>
        internal const string @CompositeFontAttributeValue2 = "CompositeFontAttributeValue2";
        /// <summary>Unicode range is not valid.</summary>
        internal const string @CompositeFontInvalidUnicodeRange = "CompositeFontInvalidUnicodeRange";
        /// <summary>Missing required attribute '{0}'.</summary>
        internal const string @CompositeFontMissingAttribute = "CompositeFontMissingAttribute";
        /// <summary>Missing required element '{0}'.</summary>
        internal const string @CompositeFontMissingElement = "CompositeFontMissingElement";
        /// <summary>The composite font contains significant whitespace where none is expected.</summary>
        internal const string @CompositeFontSignificantWhitespace = "CompositeFontSignificantWhitespace";
        /// <summary>'{0}' attribute in XML namespace '{1}' not recognized. Note that attribute names are case sensitive.</summary>
        internal const string @CompositeFontUnknownAttribute = "CompositeFontUnknownAttribute";
        /// <summary>'{0}' element in XML namespace '{1}' not recognized. Note that element names are case sensitive.</summary>
        internal const string @CompositeFontUnknownElement = "CompositeFontUnknownElement";
        /// <summary>A FontFamily cannot have more than one FamilyTypeface with the same Style, Weight, and Stretch.</summary>
        internal const string @CompositeFont_DuplicateTypeface = "CompositeFont_DuplicateTypeface";
        /// <summary>The FontFamily cannot hold any more FamilyMaps.</summary>
        internal const string @CompositeFont_TooManyFamilyMaps = "CompositeFont_TooManyFamilyMaps";
        /// <summary>The root Visual of a VisualTarget cannot have a parent.</summary>
        internal const string @CompositionTarget_RootVisual_HasParent = "CompositionTarget_RootVisual_HasParent";
        /// <summary>Possible constructor recursion detected.</summary>
        internal const string @ConstructorRecursion = "ConstructorRecursion";
        /// <summary>Shift+F10;Apps</summary>
        internal const string @ContextMenuKeyDisplayString = "ContextMenuKeyDisplayString";
        /// <summary>Context Menu</summary>
        internal const string @ContextMenuText = "ContextMenuText";
        /// <summary>Cannot convert from type.</summary>
        internal const string @Converter_ConvertFromNotSupported = "Converter_ConvertFromNotSupported";
        /// <summary>Cannot convert to type.</summary>
        internal const string @Converter_ConvertToNotSupported = "Converter_ConvertToNotSupported";
        /// <summary>Ctrl+C;Ctrl+Insert</summary>
        internal const string @CopyKeyDisplayString = "CopyKeyDisplayString";
        /// <summary>Copy</summary>
        internal const string @CopyText = "CopyText";
        /// <summary></summary>
        internal const string @CorrectionListKey = "CorrectionListKey";
        /// <summary></summary>
        internal const string @CorrectionListKeyDisplayString = "CorrectionListKeyDisplayString";
        /// <summary>Correction List</summary>
        internal const string @CorrectionListText = "CorrectionListText";
        /// <summary>Count must be less than or equal to remaining number of bits in stream.</summary>
        internal const string @CountOfBitsGreatThanRemainingBits = "CountOfBitsGreatThanRemainingBits";
        /// <summary>Count must be less than or equal to bits per byte and greater than zero.</summary>
        internal const string @CountOfBitsOutOfRange = "CountOfBitsOutOfRange";
        /// <summary>Text formatting engine cannot format breakpoints due to error: '{0}'.</summary>
        internal const string @CreateBreaksFailure = "CreateBreaksFailure";
        /// <summary>Text formatting engine cannot create text formatting context due to error: '{0}'.</summary>
        internal const string @CreateContextFailure = "CreateContextFailure";
        /// <summary>Text formatting engine cannot format a line of text due to error: '{0}'.</summary>
        internal const string @CreateLineFailure = "CreateLineFailure";
        /// <summary>Text formatting engine cannot format a paragraph cache due to error: '{0}'.</summary>
        internal const string @CreateParaBreakingSessionFailure = "CreateParaBreakingSessionFailure";
        /// <summary>Current dispatcher cannot be found.</summary>
        internal const string @CurrentDispatcherNotFound = "CurrentDispatcherNotFound";
        /// <summary>Failed to load cursor from the stream.</summary>
        internal const string @Cursor_InvalidStream = "Cursor_InvalidStream";
        /// <summary>Failed to load cursor file '{0}'.</summary>
        internal const string @Cursor_LoadImageFailure = "Cursor_LoadImageFailure";
        /// <summary>'{0}' has unsupported extension for cursor.</summary>
        internal const string @Cursor_UnsupportedFormat = "Cursor_UnsupportedFormat";
        /// <summary>Ctrl+X;Shift+Delete</summary>
        internal const string @CutKeyDisplayString = "CutKeyDisplayString";
        /// <summary>Cut</summary>
        internal const string @CutText = "CutText";
        /// <summary>An antialiased back buffer requires a IDirect3DDevice9Ex device.</summary>
        internal const string @D3DImage_AARequires9Ex = "D3DImage_AARequires9Ex";
        /// <summary>Back buffer's device is not valid.</summary>
        internal const string @D3DImage_InvalidDevice = "D3DImage_InvalidDevice";
        /// <summary>Back buffer's pool does not meet the requirements for the resource type.</summary>
        internal const string @D3DImage_InvalidPool = "D3DImage_InvalidPool";
        /// <summary>Back buffer's usage does not meet the requirements for the resource type.</summary>
        internal const string @D3DImage_InvalidUsage = "D3DImage_InvalidUsage";
        /// <summary>Cannot call this method without a back buffer.</summary>
        internal const string @D3DImage_MustHaveBackBuffer = "D3DImage_MustHaveBackBuffer";
        /// <summary>Back buffer's size is too large.</summary>
        internal const string @D3DImage_SurfaceTooBig = "D3DImage_SurfaceTooBig";
        /// <summary>Cannot SetData on a frozen OLE data object.</summary>
        internal const string @DataObject_CannotSetDataOnAFozenOLEDataDbject = "DataObject_CannotSetDataOnAFozenOLEDataDbject";
        /// <summary>'{0}' data format is not present on DataObject.</summary>
        internal const string @DataObject_DataFormatNotPresentOnDataObject = "DataObject_DataFormatNotPresentOnDataObject";
        /// <summary>Data object must have at least one format.</summary>
        internal const string @DataObject_DataObjectMustHaveAtLeastOneFormat = "DataObject_DataObjectMustHaveAtLeastOneFormat";
        /// <summary>Empty string is not a valid value for parameter 'format'.</summary>
        internal const string @DataObject_EmptyFormatNotAllowed = "DataObject_EmptyFormatNotAllowed";
        /// <summary>'{0}' file drop path is not valid.</summary>
        internal const string @DataObject_FileDropListHasInvalidFileDropPath = "DataObject_FileDropListHasInvalidFileDropPath";
        /// <summary>'{0}' must contain at least one file drop path.</summary>
        internal const string @DataObject_FileDropListIsEmpty = "DataObject_FileDropListIsEmpty";
        /// <summary>'{0}' dwDirection parameter value is not supported.</summary>
        internal const string @DataObject_NotImplementedEnumFormatEtc = "DataObject_NotImplementedEnumFormatEtc";
        /// <summary>Decompression of packet data failed.</summary>
        internal const string @DecompressPacketDataFailed = "DecompressPacketDataFailed";
        /// <summary>Decompression of property data failed.</summary>
        internal const string @DecompressPropertyFailed = "DecompressPropertyFailed";
        /// <summary></summary>
        internal const string @DecreaseZoomKey = "DecreaseZoomKey";
        /// <summary></summary>
        internal const string @DecreaseZoomKeyDisplayString = "DecreaseZoomKeyDisplayString";
        /// <summary>Decrease Zoom</summary>
        internal const string @DecreaseZoomText = "DecreaseZoomText";
        /// <summary>Del</summary>
        internal const string @DeleteKeyDisplayString = "DeleteKeyDisplayString";
        /// <summary>Delete</summary>
        internal const string @DeleteText = "DeleteText";
        /// <summary>Cannot find a part of the path '{0}'.</summary>
        internal const string @DirectoryNotFoundExceptionWithFileName = "DirectoryNotFoundExceptionWithFileName";
        /// <summary>'{0}' DragAction is not valid.</summary>
        internal const string @DragDrop_DragActionInvalid = "DragDrop_DragActionInvalid";
        /// <summary>'{0}' DragDropEffects is not valid.</summary>
        internal const string @DragDrop_DragDropEffectsInvalid = "DragDrop_DragDropEffectsInvalid";
        /// <summary>This Pop operation has no corresponding Push to remove from the stack because the stack depth of the DrawingContext is zero.</summary>
        internal const string @DrawingContext_TooManyPops = "DrawingContext_TooManyPops";
        /// <summary>This object has an outstanding DrawingContext. The DrawingContext must be Closed or Disposed before making Open or Append calls.</summary>
        internal const string @DrawingGroup_AlreadyOpen = "DrawingGroup_AlreadyOpen";
        /// <summary>Cannot append to a frozen DrawingGroup.Children collection.</summary>
        internal const string @DrawingGroup_CannotAppendToFrozenCollection = "DrawingGroup_CannotAppendToFrozenCollection";
        /// <summary>Cannot append to a null DrawingGroup.Children collection.</summary>
        internal const string @DrawingGroup_CannotAppendToNullCollection = "DrawingGroup_CannotAppendToNullCollection";
        /// <summary>Duplicate ApplicationGesture values are not allowed.</summary>
        internal const string @DuplicateApplicationGestureFound = "DuplicateApplicationGestureFound";
        /// <summary>RoutedEvent Name '{0}' for OwnerType '{1}' already used.</summary>
        internal const string @DuplicateEventName = "DuplicateEventName";
        /// <summary>Duplicate Stroke in StrokeCollectionChangedEventArgs.Added.</summary>
        internal const string @DuplicateStrokeAdded = "DuplicateStrokeAdded";
        /// <summary>A pixel shader using Pixel Shader Model 2.0 cannot be set because registers only available in Pixel Shader Model 3.0 are being used.</summary>
        internal const string @Effect_20ShaderUsing30Registers = "Effect_20ShaderUsing30Registers";
        /// <summary>BitmapEffect and Effect cannot be combined on a Visual.</summary>
        internal const string @Effect_CombinedLegacyAndNew = "Effect_CombinedLegacyAndNew";
        /// <summary>Cannot call BitmapEffect.GetOutput directly with a ContextInputSource. Provide a valid BitmapSource.</summary>
        internal const string @Effect_No_ContextInputSource = "Effect_No_ContextInputSource";
        /// <summary>There is no input set.</summary>
        internal const string @Effect_No_InputSource = "Effect_No_InputSource";
        /// <summary>'{0}' PixelFormat is not supported for this operation.</summary>
        internal const string @Effect_PixelFormat = "Effect_PixelFormat";
        /// <summary>An error occurred on the render thread with a user-supplied shader.</summary>
        internal const string @Effect_RenderThreadError = "Effect_RenderThreadError";
        /// <summary>Pixel Shader Model 2.0 requires floating point constants to be in registers [0-31].</summary>
        internal const string @Effect_Shader20ConstantRegisterLimit = "Effect_Shader20ConstantRegisterLimit";
        /// <summary>Pixel Shader Model 2.0 requires sampler constants to be in registers [0-3].</summary>
        internal const string @Effect_Shader20SamplerRegisterLimit = "Effect_Shader20SamplerRegisterLimit";
        /// <summary>Pixel Shader Model 3.0 requires boolean constants to be in registers [0-15].</summary>
        internal const string @Effect_Shader30BoolConstantRegisterLimit = "Effect_Shader30BoolConstantRegisterLimit";
        /// <summary>Pixel Shader Model 3.0 requires floating point constants to be in registers [0-223].</summary>
        internal const string @Effect_Shader30FloatConstantRegisterLimit = "Effect_Shader30FloatConstantRegisterLimit";
        /// <summary>Pixel Shader Model 3.0 requires integer constants to be in registers [0-15].</summary>
        internal const string @Effect_Shader30IntConstantRegisterLimit = "Effect_Shader30IntConstantRegisterLimit";
        /// <summary>Pixel Shader Model 3.0 requires sampler constants to be in registers [0-7].</summary>
        internal const string @Effect_Shader30SamplerRegisterLimit = "Effect_Shader30SamplerRegisterLimit";
        /// <summary>Shader bytecode must be an integral number of 4-byte words.</summary>
        internal const string @Effect_ShaderBytecodeSize = "Effect_ShaderBytecodeSize";
        /// <summary>No shader bytecode present.  Must either set UriSource or call SetStreamSource.</summary>
        internal const string @Effect_ShaderBytecodeSource = "Effect_ShaderBytecodeSource";
        /// <summary>Shader constant of type '{0}' is not allowed.</summary>
        internal const string @Effect_ShaderConstantType = "Effect_ShaderConstantType";
        /// <summary>Padding must be non-negative.</summary>
        internal const string @Effect_ShaderEffectPadding = "Effect_ShaderEffectPadding";
        /// <summary>PixelShader must be set on ShaderEffect.</summary>
        internal const string @Effect_ShaderPixelShaderSet = "Effect_ShaderPixelShaderSet";
        /// <summary>Pixel shader sampler must be Effect.ImplicitInput, or an instance of BitmapCacheBrush, VisualBrush, or ImageBrush.</summary>
        internal const string @Effect_ShaderSamplerType = "Effect_ShaderSamplerType";
        /// <summary>PixelShader only accepts seekable streams.</summary>
        internal const string @Effect_ShaderSeekableStream = "Effect_ShaderSeekableStream";
        /// <summary>Uri must be a file or pack Uri.</summary>
        internal const string @Effect_SourceUriMustBeFileOrPack = "Effect_SourceUriMustBeFileOrPack";
        /// <summary>Empty arrays are not a valid argument value.</summary>
        internal const string @EmptyArray = "EmptyArray";
        /// <summary>The array cannot be empty.</summary>
        internal const string @EmptyArrayNotAllowedAsArgument = "EmptyArrayNotAllowedAsArgument";
        /// <summary>No data to load.</summary>
        internal const string @EmptyDataToLoad = "EmptyDataToLoad";
        /// <summary>Collection cannot be empty.</summary>
        internal const string @EmptyScToReplace = "EmptyScToReplace";
        /// <summary>The replacement StrokeCollection cannot be empty.</summary>
        internal const string @EmptyScToReplaceWith = "EmptyScToReplaceWith";
        /// <summary>EndHitTesting has already been called on the IncrementalHitTester.</summary>
        internal const string @EndHitTestingCalled = "EndHitTestingCalled";
        /// <summary>End of stream reached.</summary>
        internal const string @EndOfStreamReached = "EndOfStreamReached";
        /// <summary>The enumerator is not valid because the collection changed.</summary>
        internal const string @Enumerator_CollectionChanged = "Enumerator_CollectionChanged";
        /// <summary>The enumerator has not been started.</summary>
        internal const string @Enumerator_NotStarted = "Enumerator_NotStarted";
        /// <summary>The enumerator has reached the end of the collection.</summary>
        internal const string @Enumerator_ReachedEnd = "Enumerator_ReachedEnd";
        /// <summary>No current object to return.</summary>
        internal const string @Enumerator_VerifyContext = "Enumerator_VerifyContext";
        /// <summary>Text formatting engine cannot enumerate contents in a line due to error: '{0}'.</summary>
        internal const string @EnumLineFailure = "EnumLineFailure";
        /// <summary>'{0}' enumeration value is not valid.</summary>
        internal const string @Enum_Invalid = "Enum_Invalid";
        /// <summary>ExtendedProperty is already part of the ExtendedPropertyCollection.</summary>
        internal const string @EPExists = "EPExists";
        /// <summary>The GUID is not part of the ExtendedPropertyCollection.</summary>
        internal const string @EPGuidNotFound = "EPGuidNotFound";
        /// <summary>Property not set.</summary>
        internal const string @EPNotFound = "EPNotFound";
        /// <summary>Event arguments must be non-null.</summary>
        internal const string @EventArgIsNull = "EventArgIsNull";
        /// <summary>Shift+Down</summary>
        internal const string @ExtendSelectionDownKeyDisplayString = "ExtendSelectionDownKeyDisplayString";
        /// <summary>Extend Selection Down</summary>
        internal const string @ExtendSelectionDownText = "ExtendSelectionDownText";
        /// <summary>Shift+Left</summary>
        internal const string @ExtendSelectionLeftKeyDisplayString = "ExtendSelectionLeftKeyDisplayString";
        /// <summary>Extend Selection Left</summary>
        internal const string @ExtendSelectionLeftText = "ExtendSelectionLeftText";
        /// <summary>Shift+Right</summary>
        internal const string @ExtendSelectionRightKeyDisplayString = "ExtendSelectionRightKeyDisplayString";
        /// <summary>Extend Selection Right</summary>
        internal const string @ExtendSelectionRightText = "ExtendSelectionRightText";
        /// <summary>Shift+Up</summary>
        internal const string @ExtendSelectionUpKeyDisplayString = "ExtendSelectionUpKeyDisplayString";
        /// <summary>Extend Selection Up</summary>
        internal const string @ExtendSelectionUpText = "ExtendSelectionUpText";
        /// <summary>Font face index must be greater than or equal to zero.</summary>
        internal const string @FaceIndexMustBePositiveOrZero = "FaceIndexMustBePositiveOrZero";
        /// <summary>Nonzero font face index values are valid only for TrueType collections (.ttc).</summary>
        internal const string @FaceIndexValidOnlyForTTC = "FaceIndexValidOnlyForTTC";
        /// <summary>Cannot load system composite fonts. Location not found.</summary>
        internal const string @FamilyCollection_CannotFindCompositeFontsLocation = "FamilyCollection_CannotFindCompositeFontsLocation";
        /// <summary>Cannot add FamilyMap because Target property is not set.</summary>
        internal const string @FamilyMap_TargetNotSet = "FamilyMap_TargetNotSet";
        /// <summary>Ctrl+I</summary>
        internal const string @FavoritesKeyDisplayString = "FavoritesKeyDisplayString";
        /// <summary>Favorites</summary>
        internal const string @FavoritesText = "FavoritesText";
        /// <summary>Input file or data stream does not conform to the expected file format specification.</summary>
        internal const string @FileFormatException = "FileFormatException";
        /// <summary>'{0}' file does not conform to the expected file format specification.</summary>
        internal const string @FileFormatExceptionWithFileName = "FileFormatExceptionWithFileName";
        /// <summary>Cannot find file '{0}'.</summary>
        internal const string @FileNotFoundExceptionWithFileName = "FileNotFoundExceptionWithFileName";
        /// <summary>Ctrl+F</summary>
        internal const string @FindKeyDisplayString = "FindKeyDisplayString";
        /// <summary>Find</summary>
        internal const string @FindText = "FindText";
        /// <summary></summary>
        internal const string @FirstPageKey = "FirstPageKey";
        /// <summary></summary>
        internal const string @FirstPageKeyDisplayString = "FirstPageKeyDisplayString";
        /// <summary>First Page</summary>
        internal const string @FirstPageText = "FirstPageText";
        /// <summary>Unrecognized float type in BAML file.</summary>
        internal const string @FloatUnknownBamlType = "FloatUnknownBamlType";
        /// <summary>Stream does not support Flush.</summary>
        internal const string @FlushNotSupported = "FlushNotSupported";
        /// <summary>A named FontFamily object cannot be modified.</summary>
        internal const string @FontFamily_ReadOnly = "FontFamily_ReadOnly";
        /// <summary>Specified value of type '{0}' must have IsFrozen set to false to modify.</summary>
        internal const string @Freezable_CantBeFrozen = "Freezable_CantBeFrozen";
        /// <summary>Clone of an instance of type '{0}' is null or not an instance of '{0}'.</summary>
        internal const string @Freezable_CloneInvalidType = "Freezable_CloneInvalidType";
        /// <summary>Cannot change FreezableCollection during a CollectionChanged event.</summary>
        internal const string @Freezable_Reentrant = "Freezable_Reentrant";
        /// <summary>Unknown/unexpected change event</summary>
        internal const string @Freezable_UnexpectedChange = "Freezable_UnexpectedChange";
        /// <summary>The transform is not defined for the point.</summary>
        internal const string @GeneralTransform_TransformFailed = "GeneralTransform_TransformFailed";
        /// <summary>The object passed to '{0}' is not a valid type.</summary>
        internal const string @General_BadType = "General_BadType";
        /// <summary>Expected object of type '{0}'.</summary>
        internal const string @General_Expected_Type = "General_Expected_Type";
        /// <summary>The object is marked 'Read Only'.</summary>
        internal const string @General_ObjectIsReadOnly = "General_ObjectIsReadOnly";
        /// <summary>Arithmetic error found while trying to perform this operation.</summary>
        internal const string @Geometry_BadNumber = "Geometry_BadNumber";
        /// <summary>No gesture recognizer is available on the system.</summary>
        internal const string @GestureRecognizerNotAvailable = "GestureRecognizerNotAvailable";
        /// <summary>Text formatting engine cannot retrieve penalty module handle due to error: '{0}'.</summary>
        internal const string @GetPenaltyModuleHandleFailure = "GetPenaltyModuleHandleFailure";
        /// <summary>Cannot get response for web request to '{0}'.</summary>
        internal const string @GetResponseFailed = "GetResponseFailed";
        /// <summary>Values for advanceWidths and glyphOffsets constitute too large of a GlyphRun. The area of its bounding box, measured in renderingEmSize squares, is '{0}' but it cannot exceed '{1}'.</summary>
        internal const string @GlyphAreaTooBig = "GlyphAreaTooBig";
        /// <summary>advanceWidths and glyphOffsets constitute coordinate too large for glyph at index '{0}'. For renderingEmSize '{1}' the values cannot exceed '{2}'.</summary>
        internal const string @GlyphCoordinateTooBig = "GlyphCoordinateTooBig";
        /// <summary>'{0}' glyph index is not valid for the specified font.</summary>
        internal const string @GlyphIndexOutOfRange = "GlyphIndexOutOfRange";
        /// <summary>Glyph typeface URI does not point to a previously recorded glyph typeface.</summary>
        internal const string @GlyphTypefaceNotRecorded = "GlyphTypefaceNotRecorded";
        /// <summary></summary>
        internal const string @GoToPageKey = "GoToPageKey";
        /// <summary></summary>
        internal const string @GoToPageKeyDisplayString = "GoToPageKeyDisplayString";
        /// <summary>Go To Page</summary>
        internal const string @GoToPageText = "GoToPageText";
        /// <summary>Handler type is mismatched.</summary>
        internal const string @HandlerTypeIllegal = "HandlerTypeIllegal";
        /// <summary>F1</summary>
        internal const string @HelpKeyDisplayString = "HelpKeyDisplayString";
        /// <summary>Help</summary>
        internal const string @HelpText = "HelpText";
        /// <summary>'{0}' HitTestParameters are not supported on '{1}'.</summary>
        internal const string @HitTest_Invalid = "HitTest_Invalid";
        /// <summary>Hit testing with a singular MatrixCamera is not supported.</summary>
        internal const string @HitTest_Singular = "HitTest_Singular";
        /// <summary>Cannot access a disposed HwndSource.</summary>
        internal const string @HwndSourceDisposed = "HwndSourceDisposed";
        /// <summary>Due to protocol mismatch hardware support is not available.</summary>
        internal const string @HwndTarget_HardwareNotSupportDueToProtocolMismatch = "HwndTarget_HardwareNotSupportDueToProtocolMismatch";
        /// <summary>The specified handle is not a valid window handle.</summary>
        internal const string @HwndTarget_InvalidWindowHandle = "HwndTarget_InvalidWindowHandle";
        /// <summary>The specified window does not belong to the current process.</summary>
        internal const string @HwndTarget_InvalidWindowProcess = "HwndTarget_InvalidWindowProcess";
        /// <summary>The specified window does not belong to the current thread.</summary>
        internal const string @HwndTarget_InvalidWindowThread = "HwndTarget_InvalidWindowThread";
        /// <summary>Another HwndTarget is associated with this window.</summary>
        internal const string @HwndTarget_WindowAlreadyHasContent = "HwndTarget_WindowAlreadyHasContent";
        /// <summary>Cannot animate the '{0}' property on '{1}' because the object is sealed or frozen.</summary>
        internal const string @IAnimatable_CantAnimateSealedDO = "IAnimatable_CantAnimateSealedDO";
        /// <summary>Alpha threshold must be from 0 through 100.</summary>
        internal const string @Image_AlphaThresholdOutOfRange = "Image_AlphaThresholdOutOfRange";
        /// <summary>The bitmap specified does not have the correct dimensions.</summary>
        internal const string @Image_BadDimensions = "Image_BadDimensions";
        /// <summary>The image has corrupted metadata header.</summary>
        internal const string @Image_BadMetadataHeader = "Image_BadMetadataHeader";
        /// <summary>'{0}' not a valid pixel format.</summary>
        internal const string @Image_BadPixelFormat = "Image_BadPixelFormat";
        /// <summary>The stream is corrupted.</summary>
        internal const string @Image_BadStreamData = "Image_BadStreamData";
        /// <summary>DLL version not correct.</summary>
        internal const string @Image_BadVersion = "Image_BadVersion";
        /// <summary>Unable to create temporary file for download.</summary>
        internal const string @Image_CannotCreateTempFile = "Image_CannotCreateTempFile";
        /// <summary>The Image passed to the ImageVisualManager cannot be frozen.</summary>
        internal const string @Image_CantBeFrozen = "Image_CantBeFrozen";
        /// <summary>The codec cannot use the type of stream provided.</summary>
        internal const string @Image_CantDealWithStream = "Image_CantDealWithStream";
        /// <summary>The codec cannot use the type of URI provided.</summary>
        internal const string @Image_CantDealWithUri = "Image_CantDealWithUri";
        /// <summary>Codec added more than once.</summary>
        internal const string @Image_CodecPresent = "Image_CodecPresent";
        /// <summary>Color context is not valid.</summary>
        internal const string @Image_ColorContextInvalid = "Image_ColorContextInvalid";
        /// <summary>Color transform is not valid.</summary>
        internal const string @Image_ColorTransformInvalid = "Image_ColorTransformInvalid";
        /// <summary>No imaging component suitable to complete this operation was found.</summary>
        internal const string @Image_ComponentNotFound = "Image_ComponentNotFound";
        /// <summary>The mime type registered with the system does not match the mime type of the file.</summary>
        internal const string @Image_ContentTypeDoesNotMatchDecoder = "Image_ContentTypeDoesNotMatchDecoder";
        /// <summary>The image decoder cannot decode the image. The image might be corrupted.</summary>
        internal const string @Image_DecoderError = "Image_DecoderError";
        /// <summary>The system display state is not valid.</summary>
        internal const string @Image_DisplayStateInvalid = "Image_DisplayStateInvalid";
        /// <summary>Duplicate copies of metadata present.</summary>
        internal const string @Image_DuplicateMetadataPresent = "Image_DuplicateMetadataPresent";
        /// <summary>The designated BitmapEncoder does not support ColorContexts.</summary>
        internal const string @Image_EncoderNoColorContext = "Image_EncoderNoColorContext";
        /// <summary>The designated BitmapEncoder does not support global metadata.</summary>
        internal const string @Image_EncoderNoGlobalMetadata = "Image_EncoderNoGlobalMetadata";
        /// <summary>The designated BitmapEncoder does not support global thumbnails.</summary>
        internal const string @Image_EncoderNoGlobalThumbnail = "Image_EncoderNoGlobalThumbnail";
        /// <summary>The designated BitmapEncoder does not support previews.</summary>
        internal const string @Image_EncoderNoPreview = "Image_EncoderNoPreview";
        /// <summary>Cannot call EndInit without a matching BeginInit call.</summary>
        internal const string @Image_EndInitWithoutBeginInit = "Image_EndInitWithoutBeginInit";
        /// <summary>The image is missing a frame.</summary>
        internal const string @Image_FrameMissing = "Image_FrameMissing";
        /// <summary>This class does not support cloning.</summary>
        internal const string @Image_FreezableCloneNotAllowed = "Image_FreezableCloneNotAllowed";
        /// <summary>Empty GUID is not valid for '{0}'.</summary>
        internal const string @Image_GuidEmpty = "Image_GuidEmpty";
        /// <summary>The image cannot be decoded. The image header might be corrupted.</summary>
        internal const string @Image_HeaderError = "Image_HeaderError";
        /// <summary>Must specify a palette when using an indexed pixel format.</summary>
        internal const string @Image_IndexedPixelFormatRequiresPalette = "Image_IndexedPixelFormatRequiresPalette";
        /// <summary>Already in an initializing state.</summary>
        internal const string @Image_InInitialize = "Image_InInitialize";
        /// <summary>BitmapImage initialization is not complete. Call the EndInit method to complete the initialization.</summary>
        internal const string @Image_InitializationIncomplete = "Image_InitializationIncomplete";
        /// <summary>InPlaceBitmapMetadataWriter cannot be copied.</summary>
        internal const string @Image_InplaceMetadataNoCopy = "Image_InplaceMetadataNoCopy";
        /// <summary>Buffer size is not sufficient.</summary>
        internal const string @Image_InsufficientBuffer = "Image_InsufficientBuffer";
        /// <summary>Buffer not large enough to copy memory.</summary>
        internal const string @Image_InsufficientBufferSize = "Image_InsufficientBufferSize";
        /// <summary>An error occurred.</summary>
        internal const string @Image_InternalError = "Image_InternalError";
        /// <summary>Cannot match the type of this array to a pixel format.</summary>
        internal const string @Image_InvalidArrayForPixel = "Image_InvalidArrayForPixel";
        /// <summary>Bitmap color context is not valid.</summary>
        internal const string @Image_InvalidColorContext = "Image_InvalidColorContext";
        /// <summary>Character is not valid in metadata query request.</summary>
        internal const string @Image_InvalidQueryCharacter = "Image_InvalidQueryCharacter";
        /// <summary>Metadata query request is not valid.</summary>
        internal const string @Image_InvalidQueryRequest = "Image_InvalidQueryRequest";
        /// <summary>The lock count cannot exceed UInt32.MaxValue.</summary>
        internal const string @Image_LockCountLimit = "Image_LockCountLimit";
        /// <summary>BitmapMetadata initialization incomplete.</summary>
        internal const string @Image_MetadataInitializationIncomplete = "Image_MetadataInitializationIncomplete";
        /// <summary>The bitmap metadata is not compatible with this container format.</summary>
        internal const string @Image_MetadataNotCompatible = "Image_MetadataNotCompatible";
        /// <summary>BitmapMetadata is not available on BitmapImage.</summary>
        internal const string @Image_MetadataNotSupported = "Image_MetadataNotSupported";
        /// <summary>Bitmap metadata cannot be changed.</summary>
        internal const string @Image_MetadataReadOnly = "Image_MetadataReadOnly";
        /// <summary>Cannot add any more top-level metadata blocks.</summary>
        internal const string @Image_MetadataSizeFixed = "Image_MetadataSizeFixed";
        /// <summary>Cannot call this method while the image is unlocked.</summary>
        internal const string @Image_MustBeLocked = "Image_MustBeLocked";
        /// <summary>Property '{0}' or property '{1}' must be set.</summary>
        internal const string @Image_NeitherArgument = "Image_NeitherArgument";
        /// <summary>'{0}' property is not set.</summary>
        internal const string @Image_NoArgument = "Image_NoArgument";
        /// <summary>No codec found that can decode the specified file.</summary>
        internal const string @Image_NoCodecsFound = "Image_NoCodecsFound";
        /// <summary>Image does not contain any frames.</summary>
        internal const string @Image_NoDecodeFrames = "Image_NoDecodeFrames";
        /// <summary>Cannot save an image with no frames.</summary>
        internal const string @Image_NoFrames = "Image_NoFrames";
        /// <summary>The specified image does not contain a palette.</summary>
        internal const string @Image_NoPalette = "Image_NoPalette";
        /// <summary>No information was found about this pixel format.</summary>
        internal const string @Image_NoPixelFormatFound = "Image_NoPixelFormatFound";
        /// <summary>Bitmap does not contain thumbnail.</summary>
        internal const string @Image_NoThumbnail = "Image_NoThumbnail";
        /// <summary>BitmapImage has not been initialized.  Call the BeginInit method, set the appropriate properties, and then call the EndInit method.</summary>
        internal const string @Image_NotInitialized = "Image_NotInitialized";
        /// <summary>Cannot set the initializing state more than once.</summary>
        internal const string @Image_OnlyOneInit = "Image_OnlyOneInit";
        /// <summary>Cannot call Save on an Encoder more than once.</summary>
        internal const string @Image_OnlyOneSave = "Image_OnlyOneSave";
        /// <summary>Transform must be a combination of scales, flips, and 90 degree rotations.</summary>
        internal const string @Image_OnlyOrthogonal = "Image_OnlyOrthogonal";
        /// <summary>In place editing of bitmap metadata is not allowed because the original source is not writable.</summary>
        internal const string @Image_OriginalStreamReadOnly = "Image_OriginalStreamReadOnly";
        /// <summary>The image data generated an overflow during processing.</summary>
        internal const string @Image_Overflow = "Image_Overflow";
        /// <summary>The number of colors in the palette is larger than the maximum allowed by the supplied pixel format.</summary>
        internal const string @Image_PaletteColorsDoNotMatchFormat = "Image_PaletteColorsDoNotMatchFormat";
        /// <summary>Must use a fixed palette type. '{0}' not supported here.</summary>
        internal const string @Image_PaletteFixedType = "Image_PaletteFixedType";
        /// <summary>Cannot create a palette with less than 1 color or more than 256 colors.</summary>
        internal const string @Image_PaletteZeroColors = "Image_PaletteZeroColors";
        /// <summary>Property cannot be found.</summary>
        internal const string @Image_PropertyNotFound = "Image_PropertyNotFound";
        /// <summary>This codec does not support the specified property.</summary>
        internal const string @Image_PropertyNotSupported = "Image_PropertyNotSupported";
        /// <summary>Property is corrupted.</summary>
        internal const string @Image_PropertySize = "Image_PropertySize";
        /// <summary>Unexpected property type or value.</summary>
        internal const string @Image_PropertyUnexpectedType = "Image_PropertyUnexpectedType";
        /// <summary>The metadata query is valid only at the root of the metadata hierarchy.</summary>
        internal const string @Image_RequestOnlyValidAtMetadataRoot = "Image_RequestOnlyValidAtMetadataRoot";
        /// <summary>Cannot set this property outside a BeginInit/EndInit block.</summary>
        internal const string @Image_SetPropertyOutsideBeginEndInit = "Image_SetPropertyOutsideBeginEndInit";
        /// <summary>Cannot invert singular matrix.</summary>
        internal const string @Image_SingularMatrix = "Image_SingularMatrix";
        /// <summary>Bad Rotation parameter. Only Rotate0, Rotate90, Rotate180, and Rotate270 are supported.</summary>
        internal const string @Image_SizeOptionsAngle = "Image_SizeOptionsAngle";
        /// <summary>The image dimensions are out of the range supported by this codec.</summary>
        internal const string @Image_SizeOutOfRange = "Image_SizeOutOfRange";
        /// <summary>Metadata stream is not available for this operation.</summary>
        internal const string @Image_StreamNotAvailable = "Image_StreamNotAvailable";
        /// <summary>Cannot read from the stream.</summary>
        internal const string @Image_StreamRead = "Image_StreamRead";
        /// <summary>Cannot write to the stream.</summary>
        internal const string @Image_StreamWrite = "Image_StreamWrite";
        /// <summary>The bitmap has too many scanlines for the specified encoder.</summary>
        internal const string @Image_TooManyScanlines = "Image_TooManyScanlines";
        /// <summary>Commit unsuccessful because too much metadata changed.</summary>
        internal const string @Image_TooMuchMetadata = "Image_TooMuchMetadata";
        /// <summary>Unexpected type of metadata.</summary>
        internal const string @Image_UnexpectedMetadataType = "Image_UnexpectedMetadataType";
        /// <summary>The image format is unrecognized.</summary>
        internal const string @Image_UnknownFormat = "Image_UnknownFormat";
        /// <summary>Operation not supported.</summary>
        internal const string @Image_UnsupportedOperation = "Image_UnsupportedOperation";
        /// <summary>Pixel format not supported.</summary>
        internal const string @Image_UnsupportedPixelFormat = "Image_UnsupportedPixelFormat";
        /// <summary>Operation caused an invalid state.</summary>
        internal const string @Image_WrongState = "Image_WrongState";
        /// <summary>The StylusPointDescriptions are incompatible. Use the StylusPointDescription.GetCommonDescription method to find a common StylusPointDescription and then call StylusPointCollection.Reformat to return a compatible StylusPointCollection.</summary>
        internal const string @IncompatibleStylusPointDescriptions = "IncompatibleStylusPointDescriptions";
        /// <summary></summary>
        internal const string @IncreaseZoomKey = "IncreaseZoomKey";
        /// <summary></summary>
        internal const string @IncreaseZoomKeyDisplayString = "IncreaseZoomKeyDisplayString";
        /// <summary>Increase Zoom</summary>
        internal const string @IncreaseZoomText = "IncreaseZoomText";
        /// <summary>The object is already being initialized.</summary>
        internal const string @InInitialization = "InInitialization";
        /// <summary>The operation fails because the object is not fully initialized.</summary>
        internal const string @InitializationIncomplete = "InitializationIncomplete";
        /// <summary>Cannot initialize compressor.</summary>
        internal const string @InitializingCompressorFailed = "InitializingCompressorFailed";
        /// <summary>InnerRequest not available for preloaded packages.</summary>
        internal const string @InnerRequestNotAllowed = "InnerRequestNotAllowed";
        /// <summary>Gesture accepts only objects of type '{0}'.</summary>
        internal const string @InputBinding_ExpectedInputGesture = "InputBinding_ExpectedInputGesture";
        /// <summary>InputLanguageManager is not ready to change the current input languages.</summary>
        internal const string @InputLanguageManager_NotReadyToChangeCurrentLanguage = "InputLanguageManager_NotReadyToChangeCurrentLanguage";
        /// <summary>'{0}' is not a valid ImeConversionMode.</summary>
        internal const string @InputMethod_InvalidConversionMode = "InputMethod_InvalidConversionMode";
        /// <summary>'{0}' is not a valid ImeSentenceMode.</summary>
        internal const string @InputMethod_InvalidSentenceMode = "InputMethod_InvalidSentenceMode";
        /// <summary>The InputProviderSite has already been disposed.</summary>
        internal const string @InputProviderSiteDisposed = "InputProviderSiteDisposed";
        /// <summary>'{0}' is not a valid InputScopeName.</summary>
        internal const string @InputScope_InvalidInputScopeName = "InputScope_InvalidInputScopeName";
        /// <summary>Integer collection size cannot be negative.</summary>
        internal const string @IntegerCollectionLengthLessThanZero = "IntegerCollectionLengthLessThanZero";
        /// <summary>An absolute URI in a font family name must have file:// scheme.</summary>
        internal const string @InvalidAbsoluteUriInFontFamilyName = "InvalidAbsoluteUriInFontFamilyName";
        /// <summary>The additional data passed in does not match what is expected based on the StylusPointDescription.</summary>
        internal const string @InvalidAdditionalDataForStylusPoint = "InvalidAdditionalDataForStylusPoint";
        /// <summary>Maximum buffer length must be within actual buffer length.</summary>
        internal const string @InvalidBufferLength = "InvalidBufferLength";
        /// <summary>Byte ranges are not valid in '{0}'.</summary>
        internal const string @InvalidByteRanges = "InvalidByteRanges";
        /// <summary>'{0}' cursor type is not valid.</summary>
        internal const string @InvalidCursorType = "InvalidCursorType";
        /// <summary>The specified data is invalid, see inner exception for details.</summary>
        internal const string @InvalidDataInISF = "InvalidDataInISF";
        /// <summary>Property data must be a non-reference variant compatible type.</summary>
        internal const string @InvalidDataTypeForExtendedProperty = "InvalidDataTypeForExtendedProperty";
        /// <summary>The value is out of range.</summary>
        internal const string @InvalidDiameter = "InvalidDiameter";
        /// <summary>Height must be greater than or equal to DrawingAttributes.MinHeight and less than or equal to DrawingAttribute.MaxHeight.</summary>
        internal const string @InvalidDrawingAttributesHeight = "InvalidDrawingAttributesHeight";
        /// <summary>Width must be greater than or equal to DrawingAttributes.MinWidth and less than or equal to DrawingAttribute.MaxWidth.</summary>
        internal const string @InvalidDrawingAttributesWidth = "InvalidDrawingAttributesWidth";
        /// <summary>Extended property data type is not valid.</summary>
        internal const string @InvalidEpInIsf = "InvalidEpInIsf";
        /// <summary>The event handle is not usable.</summary>
        internal const string @InvalidEventHandle = "InvalidEventHandle";
        /// <summary>GUID cannot be empty.</summary>
        internal const string @InvalidGuid = "InvalidGuid";
        /// <summary>The specified GUID represents a button, so isButton must be true.</summary>
        internal const string @InvalidIsButtonForId = "InvalidIsButtonForId";
        /// <summary>The specified GUID does not represent a button, so isButton must be false.</summary>
        internal const string @InvalidIsButtonForId2 = "InvalidIsButtonForId2";
        /// <summary>Infinity member value is not valid in Matrix.</summary>
        internal const string @InvalidMatrixContainsInfinity = "InvalidMatrixContainsInfinity";
        /// <summary>NaN is not a valid value for Matrix member.</summary>
        internal const string @InvalidMatrixContainsNaN = "InvalidMatrixContainsNaN";
        /// <summary>StylusPointPropertyInfos that are buttons must have a minimum of 0 and a maximum of 1.</summary>
        internal const string @InvalidMinMaxForButton = "InvalidMinMaxForButton";
        /// <summary>The part name does not correspond to its content type.</summary>
        internal const string @InvalidPartName = "InvalidPartName";
        /// <summary>PermissionState value '{0}' is not valid for this Permission.</summary>
        internal const string @InvalidPermissionStateValue = "InvalidPermissionStateValue";
        /// <summary>Permission type is not valid. Expected '{0}'.</summary>
        internal const string @InvalidPermissionType = "InvalidPermissionType";
        /// <summary>Pressure must be a value between 0 and 1.</summary>
        internal const string @InvalidPressureValue = "InvalidPressureValue";
        /// <summary>The stroke being removed does not exist in the current collection.</summary>
        internal const string @InvalidRemovedStroke = "InvalidRemovedStroke";
        /// <summary>The stroke being replaced does not exist in the current collection.</summary>
        internal const string @InvalidReplacedStroke = "InvalidReplacedStroke";
        /// <summary>HTTP byte range downloader can support only HTTP or HTTPS schemes.</summary>
        internal const string @InvalidScheme = "InvalidScheme";
        /// <summary>'{0}' must be a relative URI for site of origin.</summary>
        internal const string @InvalidSiteOfOriginUri = "InvalidSiteOfOriginUri";
        /// <summary>The specified size is less than the information decoded in the ISF stream.</summary>
        internal const string @InvalidSizeSpecified = "InvalidSizeSpecified";
        /// <summary>Stream is not valid.</summary>
        internal const string @InvalidStream = "InvalidStream";
        /// <summary>Translation is not valid.</summary>
        internal const string @InvalidSttValue = "InvalidSttValue";
        /// <summary>StylusPointCollection cannot be empty when attached to a Stroke.</summary>
        internal const string @InvalidStylusPointCollectionZeroCount = "InvalidStylusPointCollectionZeroCount";
        /// <summary>The specified collection cannot be empty.</summary>
        internal const string @InvalidStylusPointConstructionZeroLengthCollection = "InvalidStylusPointConstructionZeroLengthCollection";
        /// <summary>StylusPointDescription must contain at least X, Y and NormalPressure in that order.</summary>
        internal const string @InvalidStylusPointDescription = "InvalidStylusPointDescription";
        /// <summary>When constructing a StylusPointDescription, any StylusPointPropertyInfos that represent buttons must be placed at the end of the collection.</summary>
        internal const string @InvalidStylusPointDescriptionButtonsMustBeLast = "InvalidStylusPointDescriptionButtonsMustBeLast";
        /// <summary>StylusPointDescription cannot contain duplicate StylusPointPropertyInfos.</summary>
        internal const string @InvalidStylusPointDescriptionDuplicatesFound = "InvalidStylusPointDescriptionDuplicatesFound";
        /// <summary>The specified StylusPointDescription must be a subset.</summary>
        internal const string @InvalidStylusPointDescriptionSubset = "InvalidStylusPointDescriptionSubset";
        /// <summary>StylusPointDescription supports no more than 31 buttons.</summary>
        internal const string @InvalidStylusPointDescriptionTooManyButtons = "InvalidStylusPointDescriptionTooManyButtons";
        /// <summary>The StylusPoint does not support the specified StylusPointProperty.</summary>
        internal const string @InvalidStylusPointProperty = "InvalidStylusPointProperty";
        /// <summary>Resolution must be at least 0.0f.</summary>
        internal const string @InvalidStylusPointPropertyInfoResolution = "InvalidStylusPointPropertyInfoResolution";
        /// <summary>Value cannot be Double.NaN.</summary>
        internal const string @InvalidStylusPointXYNaN = "InvalidStylusPointXYNaN";
        /// <summary>Cannot have empty name of a temporary file.</summary>
        internal const string @InvalidTempFileName = "InvalidTempFileName";
        /// <summary>The requested TextDecorationCollection string is not valid: '{0}'.</summary>
        internal const string @InvalidTextDecorationCollectionString = "InvalidTextDecorationCollectionString";
        /// <summary>Invalid value '{0}' for type '{1}'.</summary>
        internal const string @InvalidValueOfType = "InvalidValueOfType";
        /// <summary>Value must be of type '{0}'.</summary>
        internal const string @InvalidValueType = "InvalidValueType";
        /// <summary>Value must be of type '{0}' or '{1}'.</summary>
        internal const string @InvalidValueType1 = "InvalidValueType1";
        /// <summary>'{0}' is not a valid type for IInputElement. UIElement or ContentElement expected.</summary>
        internal const string @Invalid_IInputElement = "Invalid_IInputElement";
        /// <summary>The length of the ISF data must be greater than zero.</summary>
        internal const string @Invalid_isfData_Length = "Invalid_isfData_Length";
        /// <summary>The URI specified is invalid.</summary>
        internal const string @Invalid_URI = "Invalid_URI";
        /// <summary>A read or write operation references a location outside the bounds of the buffer provided.</summary>
        internal const string @IOBufferOverflow = "IOBufferOverflow";
        /// <summary>I/O error when opening file '{0}'.</summary>
        internal const string @IOExceptionWithFileName = "IOExceptionWithFileName";
        /// <summary>InkSerializedFormat operation failed.</summary>
        internal const string @IsfOperationFailed = "IsfOperationFailed";
        /// <summary>The specified keyboard sink is already owned by a site.</summary>
        internal const string @KeyboardSinkAlreadyOwned = "KeyboardSinkAlreadyOwned";
        /// <summary>The specified keyboard sink must be a UIElement.</summary>
        internal const string @KeyboardSinkMustBeAnElement = "KeyboardSinkMustBeAnElement";
        /// <summary>The specified keyboard sink is not a child of this source.</summary>
        internal const string @KeyboardSinkNotAChild = "KeyboardSinkNotAChild";
        /// <summary>'{0}+{1}' key and modifier combination is not supported for KeyGesture.</summary>
        internal const string @KeyGesture_Invalid = "KeyGesture_Invalid";
        /// <summary></summary>
        internal const string @LastPageKey = "LastPageKey";
        /// <summary></summary>
        internal const string @LastPageKeyDisplayString = "LastPageKeyDisplayString";
        /// <summary>Last Page</summary>
        internal const string @LastPageText = "LastPageText";
        /// <summary>Layout recursion reached allowed limit to avoid stack overflow: '{0}'. Either the tree contains a loop or is too deep.</summary>
        internal const string @LayoutManager_DeepRecursion = "LayoutManager_DeepRecursion";
        /// <summary>An unrecognized ManipulationMode flag was encountered.</summary>
        internal const string @Manipulation_InvalidManipulationMode = "Manipulation_InvalidManipulationMode";
        /// <summary>Manipulation is not active on the specified element.</summary>
        internal const string @Manipulation_ManipulationNotActive = "Manipulation_ManipulationNotActive";
        /// <summary>IsManipulationEnabled is not set to true on the specified element.</summary>
        internal const string @Manipulation_ManipulationNotEnabled = "Manipulation_ManipulationNotEnabled";
        /// <summary>Cannot invert the matrix, because the matrix is not invertible.</summary>
        internal const string @Matrix3D_NotInvertible = "Matrix3D_NotInvertible";
        /// <summary>The specified Matrix must be invertible.</summary>
        internal const string @MatrixNotInvertible = "MatrixNotInvertible";
        /// <summary></summary>
        internal const string @MediaBoostBassKey = "MediaBoostBassKey";
        /// <summary></summary>
        internal const string @MediaBoostBassKeyDisplayString = "MediaBoostBassKeyDisplayString";
        /// <summary>Boost Bass</summary>
        internal const string @MediaBoostBassText = "MediaBoostBassText";
        /// <summary></summary>
        internal const string @MediaChannelDownKey = "MediaChannelDownKey";
        /// <summary></summary>
        internal const string @MediaChannelDownKeyDisplayString = "MediaChannelDownKeyDisplayString";
        /// <summary>Channel Down</summary>
        internal const string @MediaChannelDownText = "MediaChannelDownText";
        /// <summary></summary>
        internal const string @MediaChannelUpKey = "MediaChannelUpKey";
        /// <summary></summary>
        internal const string @MediaChannelUpKeyDisplayString = "MediaChannelUpKeyDisplayString";
        /// <summary>Channel Up</summary>
        internal const string @MediaChannelUpText = "MediaChannelUpText";
        /// <summary>Cannot call this API during the OnRender callback. During OnRender, only drawing operations that draw the content of the Visual can be performed.</summary>
        internal const string @MediaContext_APINotAllowed = "MediaContext_APINotAllowed";
        /// <summary>An infinite loop appears to have resulted from cross-dependent views.</summary>
        internal const string @MediaContext_InfiniteLayoutLoop = "MediaContext_InfiniteLayoutLoop";
        /// <summary>An infinite loop appears to have resulted from repeatedly invalidating the TimeManager during the Layout/Render process.</summary>
        internal const string @MediaContext_InfiniteTickLoop = "MediaContext_InfiniteTickLoop";
        /// <summary>Invalid user-specified pixel shader.  Register a PixelShader.InvalidPixelShaderEncountered event handler to avoid this exception being raised.</summary>
        internal const string @MediaContext_NoBadShaderHandler = "MediaContext_NoBadShaderHandler";
        /// <summary>Out of video memory.</summary>
        internal const string @MediaContext_OutOfVideoMemory = "MediaContext_OutOfVideoMemory";
        /// <summary>An unspecified error occurred on the render thread.</summary>
        internal const string @MediaContext_RenderThreadError = "MediaContext_RenderThreadError";
        /// <summary></summary>
        internal const string @MediaDecreaseBassKey = "MediaDecreaseBassKey";
        /// <summary></summary>
        internal const string @MediaDecreaseBassKeyDisplayString = "MediaDecreaseBassKeyDisplayString";
        /// <summary>Decrease Bass</summary>
        internal const string @MediaDecreaseBassText = "MediaDecreaseBassText";
        /// <summary></summary>
        internal const string @MediaDecreaseMicrophoneVolumeKey = "MediaDecreaseMicrophoneVolumeKey";
        /// <summary></summary>
        internal const string @MediaDecreaseMicrophoneVolumeKeyDisplayString = "MediaDecreaseMicrophoneVolumeKeyDisplayString";
        /// <summary>Decrease Microphone Volume</summary>
        internal const string @MediaDecreaseMicrophoneVolumeText = "MediaDecreaseMicrophoneVolumeText";
        /// <summary></summary>
        internal const string @MediaDecreaseTrebleKey = "MediaDecreaseTrebleKey";
        /// <summary></summary>
        internal const string @MediaDecreaseTrebleKeyDisplayString = "MediaDecreaseTrebleKeyDisplayString";
        /// <summary>Decrease Treble</summary>
        internal const string @MediaDecreaseTrebleText = "MediaDecreaseTrebleText";
        /// <summary></summary>
        internal const string @MediaDecreaseVolumeKey = "MediaDecreaseVolumeKey";
        /// <summary></summary>
        internal const string @MediaDecreaseVolumeKeyDisplayString = "MediaDecreaseVolumeKeyDisplayString";
        /// <summary>Decrease Volume</summary>
        internal const string @MediaDecreaseVolumeText = "MediaDecreaseVolumeText";
        /// <summary></summary>
        internal const string @MediaFastForwardKey = "MediaFastForwardKey";
        /// <summary></summary>
        internal const string @MediaFastForwardKeyDisplayString = "MediaFastForwardKeyDisplayString";
        /// <summary>Fast Forward</summary>
        internal const string @MediaFastForwardText = "MediaFastForwardText";
        /// <summary></summary>
        internal const string @MediaIncreaseBassKey = "MediaIncreaseBassKey";
        /// <summary></summary>
        internal const string @MediaIncreaseBassKeyDisplayString = "MediaIncreaseBassKeyDisplayString";
        /// <summary>Increase Bass</summary>
        internal const string @MediaIncreaseBassText = "MediaIncreaseBassText";
        /// <summary></summary>
        internal const string @MediaIncreaseMicrophoneVolumeKey = "MediaIncreaseMicrophoneVolumeKey";
        /// <summary></summary>
        internal const string @MediaIncreaseMicrophoneVolumeKeyDisplayString = "MediaIncreaseMicrophoneVolumeKeyDisplayString";
        /// <summary>Increase Microphone Volume</summary>
        internal const string @MediaIncreaseMicrophoneVolumeText = "MediaIncreaseMicrophoneVolumeText";
        /// <summary></summary>
        internal const string @MediaIncreaseTrebleKey = "MediaIncreaseTrebleKey";
        /// <summary></summary>
        internal const string @MediaIncreaseTrebleKeyDisplayString = "MediaIncreaseTrebleKeyDisplayString";
        /// <summary>Increase Treble</summary>
        internal const string @MediaIncreaseTrebleText = "MediaIncreaseTrebleText";
        /// <summary></summary>
        internal const string @MediaIncreaseVolumeKey = "MediaIncreaseVolumeKey";
        /// <summary></summary>
        internal const string @MediaIncreaseVolumeKeyDisplayString = "MediaIncreaseVolumeKeyDisplayString";
        /// <summary>Increase Volume</summary>
        internal const string @MediaIncreaseVolumeText = "MediaIncreaseVolumeText";
        /// <summary></summary>
        internal const string @MediaMuteMicrophoneVolumeKey = "MediaMuteMicrophoneVolumeKey";
        /// <summary></summary>
        internal const string @MediaMuteMicrophoneVolumeKeyDisplayString = "MediaMuteMicrophoneVolumeKeyDisplayString";
        /// <summary>Mute Microphone Volume</summary>
        internal const string @MediaMuteMicrophoneVolumeText = "MediaMuteMicrophoneVolumeText";
        /// <summary></summary>
        internal const string @MediaMuteVolumeKey = "MediaMuteVolumeKey";
        /// <summary></summary>
        internal const string @MediaMuteVolumeKeyDisplayString = "MediaMuteVolumeKeyDisplayString";
        /// <summary>Mute Volume</summary>
        internal const string @MediaMuteVolumeText = "MediaMuteVolumeText";
        /// <summary></summary>
        internal const string @MediaNextTrackKey = "MediaNextTrackKey";
        /// <summary></summary>
        internal const string @MediaNextTrackKeyDisplayString = "MediaNextTrackKeyDisplayString";
        /// <summary>Next Track</summary>
        internal const string @MediaNextTrackText = "MediaNextTrackText";
        /// <summary></summary>
        internal const string @MediaPauseKey = "MediaPauseKey";
        /// <summary></summary>
        internal const string @MediaPauseKeyDisplayString = "MediaPauseKeyDisplayString";
        /// <summary>Pause</summary>
        internal const string @MediaPauseText = "MediaPauseText";
        /// <summary></summary>
        internal const string @MediaPlayKey = "MediaPlayKey";
        /// <summary></summary>
        internal const string @MediaPlayKeyDisplayString = "MediaPlayKeyDisplayString";
        /// <summary>Play</summary>
        internal const string @MediaPlayText = "MediaPlayText";
        /// <summary></summary>
        internal const string @MediaPreviousTrackKey = "MediaPreviousTrackKey";
        /// <summary></summary>
        internal const string @MediaPreviousTrackKeyDisplayString = "MediaPreviousTrackKeyDisplayString";
        /// <summary>Previous Track</summary>
        internal const string @MediaPreviousTrackText = "MediaPreviousTrackText";
        /// <summary></summary>
        internal const string @MediaRecordKey = "MediaRecordKey";
        /// <summary></summary>
        internal const string @MediaRecordKeyDisplayString = "MediaRecordKeyDisplayString";
        /// <summary>Record</summary>
        internal const string @MediaRecordText = "MediaRecordText";
        /// <summary></summary>
        internal const string @MediaRewindKey = "MediaRewindKey";
        /// <summary></summary>
        internal const string @MediaRewindKeyDisplayString = "MediaRewindKeyDisplayString";
        /// <summary>Rewind</summary>
        internal const string @MediaRewindText = "MediaRewindText";
        /// <summary></summary>
        internal const string @MediaSelectKey = "MediaSelectKey";
        /// <summary></summary>
        internal const string @MediaSelectKeyDisplayString = "MediaSelectKeyDisplayString";
        /// <summary>Select</summary>
        internal const string @MediaSelectText = "MediaSelectText";
        /// <summary></summary>
        internal const string @MediaStopKey = "MediaStopKey";
        /// <summary></summary>
        internal const string @MediaStopKeyDisplayString = "MediaStopKeyDisplayString";
        /// <summary>Stop</summary>
        internal const string @MediaStopText = "MediaStopText";
        /// <summary>This API was accessed with arguments from the wrong context.</summary>
        internal const string @MediaSystem_ApiInvalidContext = "MediaSystem_ApiInvalidContext";
        /// <summary>Received an out of order connect or disconnect message.</summary>
        internal const string @MediaSystem_OutOfOrderConnectOrDisconnect = "MediaSystem_OutOfOrderConnectOrDisconnect";
        /// <summary></summary>
        internal const string @MediaToggleMicrophoneOnOffKey = "MediaToggleMicrophoneOnOffKey";
        /// <summary></summary>
        internal const string @MediaToggleMicrophoneOnOffKeyDisplayString = "MediaToggleMicrophoneOnOffKeyDisplayString";
        /// <summary>Toggle Microphone OnOff</summary>
        internal const string @MediaToggleMicrophoneOnOffText = "MediaToggleMicrophoneOnOffText";
        /// <summary></summary>
        internal const string @MediaTogglePlayPauseKey = "MediaTogglePlayPauseKey";
        /// <summary></summary>
        internal const string @MediaTogglePlayPauseKeyDisplayString = "MediaTogglePlayPauseKeyDisplayString";
        /// <summary>Toggle Play Pause</summary>
        internal const string @MediaTogglePlayPauseText = "MediaTogglePlayPauseText";
        /// <summary>Media file download failed.</summary>
        internal const string @Media_DownloadFailed = "Media_DownloadFailed";
        /// <summary>Installed codecs do not support the media file format.</summary>
        internal const string @Media_FileFormatNotSupported = "Media_FileFormatNotSupported";
        /// <summary>Cannot find the media file.</summary>
        internal const string @Media_FileNotFound = "Media_FileNotFound";
        /// <summary>Display driver must support video acceleration for video or audio playback.</summary>
        internal const string @Media_HardwareVideoAccelerationNotAvailable = "Media_HardwareVideoAccelerationNotAvailable";
        /// <summary>There are insufficient video resources available for video or audio playback.</summary>
        internal const string @Media_InsufficientVideoResources = "Media_InsufficientVideoResources";
        /// <summary>Value does not fall within the expected range.</summary>
        internal const string @Media_InvalidArgument = "Media_InvalidArgument";
        /// <summary>Windows Media Player version 10 or later is required.</summary>
        internal const string @Media_InvalidWmpVersion = "Media_InvalidWmpVersion";
        /// <summary>Access was denied on the media file.</summary>
        internal const string @Media_LogonFailure = "Media_LogonFailure";
        /// <summary>Cannot perform this operation while a clock is assigned to the media player.</summary>
        internal const string @Media_NotAllowedWhileTimingEngineInControl = "Media_NotAllowedWhileTimingEngineInControl";
        /// <summary>Only site-of-origin pack URIs are supported for media.</summary>
        internal const string @Media_PackURIsAreNotSupported = "Media_PackURIsAreNotSupported";
        /// <summary>No operations are valid on a closed media player except open and close.</summary>
        internal const string @Media_PlayerIsClosed = "Media_PlayerIsClosed";
        /// <summary>Unrecognized playlist file format.</summary>
        internal const string @Media_PlaylistFormatNotSupported = "Media_PlaylistFormatNotSupported";
        /// <summary>Cannot access the stream after it is closed.</summary>
        internal const string @Media_StreamClosed = "Media_StreamClosed";
        /// <summary>Accessed an uninitialized media resource.</summary>
        internal const string @Media_UninitializedResource = "Media_UninitializedResource";
        /// <summary>Channel type is not recognized.</summary>
        internal const string @Media_UnknownChannelType = "Media_UnknownChannelType";
        /// <summary>An unknown media error occurred.</summary>
        internal const string @Media_UnknownMediaExecption = "Media_UnknownMediaExecption";
        /// <summary>Must specify URI.</summary>
        internal const string @Media_UriNotSpecified = "Media_UriNotSpecified";
        /// <summary>The '{0}' method cannot be called at this time.</summary>
        internal const string @MethodCallNotAllowed = "MethodCallNotAllowed";
        /// <summary>Mismatched versions of PresentationCore.dll, Milcore.dll, WindowsCodecs.dll, or D3d9.dll. Check that these DLLs come from the same source.</summary>
        internal const string @MilErr_UnsupportedVersion = "MilErr_UnsupportedVersion";
        /// <summary>RoutedEvent in RoutedEventArgs and EventRoute are mismatched.</summary>
        internal const string @Mismatched_RoutedEvent = "Mismatched_RoutedEvent";
        /// <summary>Down</summary>
        internal const string @MoveDownKeyDisplayString = "MoveDownKeyDisplayString";
        /// <summary>Move Down</summary>
        internal const string @MoveDownText = "MoveDownText";
        /// <summary>Ctrl+Left</summary>
        internal const string @MoveFocusBackKeyDisplayString = "MoveFocusBackKeyDisplayString";
        /// <summary>Move Focus Back</summary>
        internal const string @MoveFocusBackText = "MoveFocusBackText";
        /// <summary>Ctrl+Down</summary>
        internal const string @MoveFocusDownKeyDisplayString = "MoveFocusDownKeyDisplayString";
        /// <summary>Move Focus Down</summary>
        internal const string @MoveFocusDownText = "MoveFocusDownText";
        /// <summary>Ctrl+Right</summary>
        internal const string @MoveFocusForwardKeyDisplayString = "MoveFocusForwardKeyDisplayString";
        /// <summary>Move Focus Forward</summary>
        internal const string @MoveFocusForwardText = "MoveFocusForwardText";
        /// <summary>Ctrl+PageDown</summary>
        internal const string @MoveFocusPageDownKeyDisplayString = "MoveFocusPageDownKeyDisplayString";
        /// <summary>Move Focus Page Down</summary>
        internal const string @MoveFocusPageDownText = "MoveFocusPageDownText";
        /// <summary>Ctrl+PageUp</summary>
        internal const string @MoveFocusPageUpKeyDisplayString = "MoveFocusPageUpKeyDisplayString";
        /// <summary>Move Focus Page Up</summary>
        internal const string @MoveFocusPageUpText = "MoveFocusPageUpText";
        /// <summary>Ctrl+Up</summary>
        internal const string @MoveFocusUpKeyDisplayString = "MoveFocusUpKeyDisplayString";
        /// <summary>Move Focus Up</summary>
        internal const string @MoveFocusUpText = "MoveFocusUpText";
        /// <summary>Left</summary>
        internal const string @MoveLeftKeyDisplayString = "MoveLeftKeyDisplayString";
        /// <summary>Move Left</summary>
        internal const string @MoveLeftText = "MoveLeftText";
        /// <summary>Right</summary>
        internal const string @MoveRightKeyDisplayString = "MoveRightKeyDisplayString";
        /// <summary>Move Right</summary>
        internal const string @MoveRightText = "MoveRightText";
        /// <summary>End</summary>
        internal const string @MoveToEndKeyDisplayString = "MoveToEndKeyDisplayString";
        /// <summary>Move To End</summary>
        internal const string @MoveToEndText = "MoveToEndText";
        /// <summary>Home</summary>
        internal const string @MoveToHomeKeyDisplayString = "MoveToHomeKeyDisplayString";
        /// <summary>Move To Home</summary>
        internal const string @MoveToHomeText = "MoveToHomeText";
        /// <summary>PageDown</summary>
        internal const string @MoveToPageDownKeyDisplayString = "MoveToPageDownKeyDisplayString";
        /// <summary>Move To Page Down</summary>
        internal const string @MoveToPageDownText = "MoveToPageDownText";
        /// <summary>PageUp</summary>
        internal const string @MoveToPageUpKeyDisplayString = "MoveToPageUpKeyDisplayString";
        /// <summary>Move To Page Up</summary>
        internal const string @MoveToPageUpText = "MoveToPageUpText";
        /// <summary>Up</summary>
        internal const string @MoveUpKeyDisplayString = "MoveUpKeyDisplayString";
        /// <summary>Move Up</summary>
        internal const string @MoveUpText = "MoveUpText";
        /// <summary>Cannot have more than one '{0}' instance in the same AppDomain.</summary>
        internal const string @MultiSingleton = "MultiSingleton";
        /// <summary></summary>
        internal const string @NavigateJournalKey = "NavigateJournalKey";
        /// <summary></summary>
        internal const string @NavigateJournalKeyDisplayString = "NavigateJournalKeyDisplayString";
        /// <summary>Navigate Journal</summary>
        internal const string @NavigateJournalText = "NavigateJournalText";
        /// <summary>Ctrl+N</summary>
        internal const string @NewKeyDisplayString = "NewKeyDisplayString";
        /// <summary>New</summary>
        internal const string @NewText = "NewText";
        /// <summary></summary>
        internal const string @NextPageKey = "NextPageKey";
        /// <summary></summary>
        internal const string @NextPageKeyDisplayString = "NextPageKeyDisplayString";
        /// <summary>Next Page</summary>
        internal const string @NextPageText = "NextPageText";
        /// <summary>Text formatting engine encountered a non-CLS exception.</summary>
        internal const string @NonCLSException = "NonCLSException";
        /// <summary>Unsupported Uri syntax. Method expects a relative Uri or a pack://application:,,,/ form of absolute Uri.</summary>
        internal const string @NonPackAppAbsoluteUriNotAllowed = "NonPackAppAbsoluteUriNotAllowed";
        /// <summary>Text content is not allowed on this element. Cannot add the text '{0}'.</summary>
        internal const string @NonWhiteSpaceInAddText = "NonWhiteSpaceInAddText";
        /// <summary>Not a Command</summary>
        internal const string @NotACommandText = "NotACommandText";
        /// <summary>The package URI is not allowed in the package store.</summary>
        internal const string @NotAllowedPackageUri = "NotAllowedPackageUri";
        /// <summary>Only PreProcessInput and PostProcessInput events can access InputManager staging area.</summary>
        internal const string @NotAllowedToAccessStagingArea = "NotAllowedToAccessStagingArea";
        /// <summary>The object is not being initialized.</summary>
        internal const string @NotInInitialization = "NotInInitialization";
        /// <summary>'{0}' parameter cannot be null unless '{1}' is an absolute URI.</summary>
        internal const string @NullBaseUriParam = "NullBaseUriParam";
        /// <summary>Hwnd of zero is not valid.</summary>
        internal const string @NullHwnd = "NullHwnd";
        /// <summary>Offset must be non-negative.</summary>
        internal const string @OffsetNegative = "OffsetNegative";
        /// <summary>OleRegisterDragDrop failed with return code '{0}' and window handle '{1}'.</summary>
        internal const string @OleRegisterDragDropFailure = "OleRegisterDragDropFailure";
        /// <summary>OleRevokeDragDrop failed with return code '{0}' and window handle '{1}'.</summary>
        internal const string @OleRevokeDragDropFailure = "OleRevokeDragDropFailure";
        /// <summary>OleInitialize failed for '{0}'.</summary>
        internal const string @OleServicesContext_oleInitializeFailure = "OleServicesContext_oleInitializeFailure";
        /// <summary>Current thread must be set to single thread apartment (STA) mode before OLE calls can be made.</summary>
        internal const string @OleServicesContext_ThreadMustBeSTA = "OleServicesContext_ThreadMustBeSTA";
        /// <summary>Keyboard processing can only process keyboard messages.</summary>
        internal const string @OnlyAcceptsKeyMessages = "OnlyAcceptsKeyMessages";
        /// <summary>The object is already initialized and cannot be initialized again.</summary>
        internal const string @OnlyOneInitialization = "OnlyOneInitialization";
        /// <summary>Ctrl+O</summary>
        internal const string @OpenKeyDisplayString = "OpenKeyDisplayString";
        /// <summary>Open</summary>
        internal const string @OpenText = "OpenText";
        /// <summary>Paragraph must be allowed to wrap in total-fit formatting.</summary>
        internal const string @OptimalParagraphMustWrap = "OptimalParagraphMustWrap";
        /// <summary>A package with the same URI is already in the package store.</summary>
        internal const string @PackageAlreadyExists = "PackageAlreadyExists";
        /// <summary>Cache policy is not valid.</summary>
        internal const string @PackWebRequestCachePolicyIllegal = "PackWebRequestCachePolicyIllegal";
        /// <summary>Specified ContentPosition is not valid for this element.</summary>
        internal const string @PaginatorMissingContentPosition = "PaginatorMissingContentPosition";
        /// <summary>Page number cannot be negative.</summary>
        internal const string @PaginatorNegativePageNumber = "PaginatorNegativePageNumber";
        /// <summary>The parameter value cannot be greater than '{0}'.</summary>
        internal const string @ParameterCannotBeGreaterThan = "ParameterCannotBeGreaterThan";
        /// <summary>The parameter value cannot be less than '{0}'.</summary>
        internal const string @ParameterCannotBeLessThan = "ParameterCannotBeLessThan";
        /// <summary>Parameter must be greater than or equal to zero.</summary>
        internal const string @ParameterCannotBeNegative = "ParameterCannotBeNegative";
        /// <summary>The parameter value must be between '{0}' and '{1}'.</summary>
        internal const string @ParameterMustBeBetween = "ParameterMustBeBetween";
        /// <summary>The parameter value must be greater than zero.</summary>
        internal const string @ParameterMustBeGreaterThanZero = "ParameterMustBeGreaterThanZero";
        /// <summary>The parameter value must be finite.</summary>
        internal const string @ParameterValueCannotBeInfinity = "ParameterValueCannotBeInfinity";
        /// <summary>The parameter value must be a number.</summary>
        internal const string @ParameterValueCannotBeNaN = "ParameterValueCannotBeNaN";
        /// <summary>'{0}' parameter value cannot be negative.</summary>
        internal const string @ParameterValueCannotBeNegative = "ParameterValueCannotBeNegative";
        /// <summary>'{0}' parameter value must be greater than zero.</summary>
        internal const string @ParameterValueMustBeGreaterThanZero = "ParameterValueMustBeGreaterThanZero";
        /// <summary>Token is not valid.</summary>
        internal const string @Parsers_IllegalToken = "Parsers_IllegalToken";
        /// <summary>Token is not valid because it is more than 250 characters.</summary>
        internal const string @Parsers_IllegalToken_250_Chars = "Parsers_IllegalToken_250_Chars";
        /// <summary>Incorrect form '{0}' found parsing '{1}' string.</summary>
        internal const string @Parser_BadForm = "Parser_BadForm";
        /// <summary>Empty string not allowed.</summary>
        internal const string @Parser_Empty = "Parser_Empty";
        /// <summary>Unexpected token '{0}' encountered at position '{1}'.</summary>
        internal const string @Parser_UnexpectedToken = "Parser_UnexpectedToken";
        /// <summary>Ctrl+V;Shift+Insert</summary>
        internal const string @PasteKeyDisplayString = "PasteKeyDisplayString";
        /// <summary>Paste</summary>
        internal const string @PasteText = "PasteText";
        /// <summary>Internal error in newly produced path figures.</summary>
        internal const string @PathGeometry_InternalReadBackError = "PathGeometry_InternalReadBackError";
        /// <summary>'{0}' file name is longer than the system-defined maximum length.</summary>
        internal const string @PathTooLongExceptionWithFileName = "PathTooLongExceptionWithFileName";
        /// <summary>Cannot access a disposed pen service.</summary>
        internal const string @Penservice_Disposed = "Penservice_Disposed";
        /// <summary>Unexpected size of packet from pen service.</summary>
        internal const string @PenService_InvalidPacketData = "PenService_InvalidPacketData";
        /// <summary>The window is already registered for stylus input.</summary>
        internal const string @PenService_WindowAlreadyRegistered = "PenService_WindowAlreadyRegistered";
        /// <summary>The window is not registered for stylus input.</summary>
        internal const string @PenService_WindowNotRegistered = "PenService_WindowNotRegistered";
        /// <summary></summary>
        internal const string @PreviousPageKey = "PreviousPageKey";
        /// <summary></summary>
        internal const string @PreviousPageKeyDisplayString = "PreviousPageKeyDisplayString";
        /// <summary>Previous Page</summary>
        internal const string @PreviousPageText = "PreviousPageText";
        /// <summary>Ctrl+P</summary>
        internal const string @PrintKeyDisplayString = "PrintKeyDisplayString";
        /// <summary>Ctrl+F2</summary>
        internal const string @PrintPreviewKeyDisplayString = "PrintPreviewKeyDisplayString";
        /// <summary>Print Preview</summary>
        internal const string @PrintPreviewText = "PrintPreviewText";
        /// <summary>Print</summary>
        internal const string @PrintText = "PrintText";
        /// <summary>F4</summary>
        internal const string @PropertiesKeyDisplayString = "PropertiesKeyDisplayString";
        /// <summary>Properties</summary>
        internal const string @PropertiesText = "PropertiesText";
        /// <summary>'{0}' property value must be greater than or equal to zero.</summary>
        internal const string @PropertyCannotBeNegative = "PropertyCannotBeNegative";
        /// <summary>'{0}' property value must be greater than zero.</summary>
        internal const string @PropertyMustBeGreaterThanZero = "PropertyMustBeGreaterThanZero";
        /// <summary>'{0}' property of the '{1}' class must be less than or equal to '{2}'.</summary>
        internal const string @PropertyOfClassCannotBeGreaterThan = "PropertyOfClassCannotBeGreaterThan";
        /// <summary>'{0}' property of the '{1}' class cannot be null.</summary>
        internal const string @PropertyOfClassCannotBeNull = "PropertyOfClassCannotBeNull";
        /// <summary>'{0}' property of the '{1}' class must be greater than zero.</summary>
        internal const string @PropertyOfClassMustBeGreaterThanZero = "PropertyOfClassMustBeGreaterThanZero";
        /// <summary>'{0}' property value cannot be NaN.</summary>
        internal const string @PropertyValueCannotBeNaN = "PropertyValueCannotBeNaN";
        /// <summary>Zero axis of rotation specified.</summary>
        internal const string @Quaternion_ZeroAxisSpecified = "Quaternion_ZeroAxisSpecified";
        /// <summary>Text formatting engine cannot query text information due to error: '{0}'.</summary>
        internal const string @QueryLineFailure = "QueryLineFailure";
        /// <summary>Count of bytes to read cannot be negative.</summary>
        internal const string @ReadCountNegative = "ReadCountNegative";
        /// <summary>Operation not supported on a read-only InputGestureCollection.</summary>
        internal const string @ReadOnlyInputGesturesCollection = "ReadOnlyInputGesturesCollection";
        /// <summary>Cannot call the method.</summary>
        internal const string @Rect3D_CannotCallMethod = "Rect3D_CannotCallMethod";
        /// <summary>Cannot modify this property on the Empty Rect3D.</summary>
        internal const string @Rect3D_CannotModifyEmptyRect = "Rect3D_CannotModifyEmptyRect";
        /// <summary>Rectangle cannot be empty.</summary>
        internal const string @Rect_Empty = "Rect_Empty";
        /// <summary>Ctrl+Y</summary>
        internal const string @RedoKeyDisplayString = "RedoKeyDisplayString";
        /// <summary>Redo</summary>
        internal const string @RedoText = "RedoText";
        /// <summary>The visual tree has been changed during a '{0}' event.</summary>
        internal const string @ReentrantVisualTreeChangeError = "ReentrantVisualTreeChangeError";
        /// <summary>WARNING. The visual tree has been changed during a '{0}' event.  This is not supported in a production application.  Be sure to correct this before shipping the application.</summary>
        internal const string @ReentrantVisualTreeChangeWarning = "ReentrantVisualTreeChangeWarning";
        /// <summary>F5</summary>
        internal const string @RefreshKeyDisplayString = "RefreshKeyDisplayString";
        /// <summary>Refresh</summary>
        internal const string @RefreshText = "RefreshText";
        /// <summary>Text formatting engine cannot release penalty resource due to error: '{0}'.</summary>
        internal const string @RelievePenaltyResourceFailure = "RelievePenaltyResourceFailure";
        /// <summary>Ctrl+H</summary>
        internal const string @ReplaceKeyDisplayString = "ReplaceKeyDisplayString";
        /// <summary>Replace</summary>
        internal const string @ReplaceText = "ReplaceText";
        /// <summary>The operation is not allowed after the first request is made.</summary>
        internal const string @RequestAlreadyStarted = "RequestAlreadyStarted";
        /// <summary>The calling thread must be STA, because many UI components require this.</summary>
        internal const string @RequiresSTA = "RequiresSTA";
        /// <summary>Current CachePolicy is CacheOnly but the requested resource does not exist in the cache.</summary>
        internal const string @ResourceNotFoundUnderCacheOnlyPolicy = "ResourceNotFoundUnderCacheOnlyPolicy";
        /// <summary>Every RoutedEventArgs must have a non-null RoutedEvent associated with it.</summary>
        internal const string @RoutedEventArgsMustHaveRoutedEvent = "RoutedEventArgsMustHaveRoutedEvent";
        /// <summary>Cannot change the RoutedEvent property while the RoutedEvent is being routed.</summary>
        internal const string @RoutedEventCannotChangeWhileRouting = "RoutedEventCannotChangeWhileRouting";
        /// <summary>Save As</summary>
        internal const string @SaveAsText = "SaveAsText";
        /// <summary>Ctrl+S</summary>
        internal const string @SaveKeyDisplayString = "SaveKeyDisplayString";
        /// <summary>Save</summary>
        internal const string @SaveText = "SaveText";
        /// <summary>The Strokes have changed.</summary>
        internal const string @SCDataChanged = "SCDataChanged";
        /// <summary>Path of erasing stroke cannot be null.</summary>
        internal const string @SCErasePath = "SCErasePath";
        /// <summary>Erasing Shape cannot be null.</summary>
        internal const string @SCEraseShape = "SCEraseShape";
        /// <summary>Cannot resolve current inner request URI schema. Bypass cache only for resolvable schema types such as http, ftp, or file.</summary>
        internal const string @SchemaInvalidForTransport = "SchemaInvalidForTransport";
        /// <summary>The scope must be a UIElement or ContentElement.</summary>
        internal const string @ScopeMustBeUIElementOrContent = "ScopeMustBeUIElementOrContent";
        /// <summary></summary>
        internal const string @ScrollByLineKey = "ScrollByLineKey";
        /// <summary></summary>
        internal const string @ScrollByLineKeyDisplayString = "ScrollByLineKeyDisplayString";
        /// <summary>Scroll By Line</summary>
        internal const string @ScrollByLineText = "ScrollByLineText";
        /// <summary>PageDown</summary>
        internal const string @ScrollPageDownKeyDisplayString = "ScrollPageDownKeyDisplayString";
        /// <summary>Scroll Page Down</summary>
        internal const string @ScrollPageDownText = "ScrollPageDownText";
        /// <summary></summary>
        internal const string @ScrollPageLeftKey = "ScrollPageLeftKey";
        /// <summary></summary>
        internal const string @ScrollPageLeftKeyDisplayString = "ScrollPageLeftKeyDisplayString";
        /// <summary>Scroll Page Left</summary>
        internal const string @ScrollPageLeftText = "ScrollPageLeftText";
        /// <summary></summary>
        internal const string @ScrollPageRightKey = "ScrollPageRightKey";
        /// <summary></summary>
        internal const string @ScrollPageRightKeyDisplayString = "ScrollPageRightKeyDisplayString";
        /// <summary>Scroll Page Right</summary>
        internal const string @ScrollPageRightText = "ScrollPageRightText";
        /// <summary>PageUp</summary>
        internal const string @ScrollPageUpKeyDisplayString = "ScrollPageUpKeyDisplayString";
        /// <summary>Scroll Page Up</summary>
        internal const string @ScrollPageUpText = "ScrollPageUpText";
        /// <summary>F3</summary>
        internal const string @SearchKey = "SearchKey";
        /// <summary>F3</summary>
        internal const string @SearchKeyDisplayString = "SearchKeyDisplayString";
        /// <summary>Search</summary>
        internal const string @SearchText = "SearchText";
        /// <summary>Cannot set SandboxExternalContent to true in partial trust.</summary>
        internal const string @SecurityExceptionForSettingSandboxExternalToTrue = "SecurityExceptionForSettingSandboxExternalToTrue";
        /// <summary>Cannot set seek pointer to a negative position.</summary>
        internal const string @SeekNegative = "SeekNegative";
        /// <summary>SeekOrigin value is not valid.</summary>
        internal const string @SeekOriginInvalid = "SeekOriginInvalid";
        /// <summary>Ctrl+A</summary>
        internal const string @SelectAllKeyDisplayString = "SelectAllKeyDisplayString";
        /// <summary>Select All</summary>
        internal const string @SelectAllText = "SelectAllText";
        /// <summary>Shift+End</summary>
        internal const string @SelectToEndKeyDisplayString = "SelectToEndKeyDisplayString";
        /// <summary>Select To End</summary>
        internal const string @SelectToEndText = "SelectToEndText";
        /// <summary>Shift+Home</summary>
        internal const string @SelectToHomeKeyDisplayString = "SelectToHomeKeyDisplayString";
        /// <summary>Select To Home</summary>
        internal const string @SelectToHomeText = "SelectToHomeText";
        /// <summary>Shift+PageDown</summary>
        internal const string @SelectToPageDownKeyDisplayString = "SelectToPageDownKeyDisplayString";
        /// <summary>Select To PageDown</summary>
        internal const string @SelectToPageDownText = "SelectToPageDownText";
        /// <summary>Shift+PageUp</summary>
        internal const string @SelectToPageUpKeyDisplayString = "SelectToPageUpKeyDisplayString";
        /// <summary>Select To PageUp</summary>
        internal const string @SelectToPageUpText = "SelectToPageUpText";
        /// <summary>Text formatting engine cannot set breaking conditions due to error: '{0}'.</summary>
        internal const string @SetBreakingFailure = "SetBreakingFailure";
        /// <summary>Text formatting engine cannot set document context due to error: '{0}'.</summary>
        internal const string @SetDocFailure = "SetDocFailure";
        /// <summary>The target element cannot receive focus.</summary>
        internal const string @SetFocusFailed = "SetFocusFailed";
        /// <summary>Stream does not support SetLength.</summary>
        internal const string @SetLengthNotSupported = "SetLengthNotSupported";
        /// <summary>Text formatting engine cannot set tab stop due to error: '{0}'.</summary>
        internal const string @SetTabsFailure = "SetTabsFailure";
        /// <summary>Sideways right to left text is not supported.</summary>
        internal const string @SidewaysRTLTextIsNotSupported = "SidewaysRTLTextIsNotSupported";
        /// <summary>Cannot modify this property on the Empty Size3D.</summary>
        internal const string @Size3D_CannotModifyEmptySize = "Size3D_CannotModifyEmptySize";
        /// <summary>Cannot set a negative dimension.</summary>
        internal const string @Size3D_DimensionCannotBeNegative = "Size3D_DimensionCannotBeNegative";
        /// <summary>Must set Source in RoutedEventArgs before building event route or invoking handlers.</summary>
        internal const string @SourceNotSet = "SourceNotSet";
        /// <summary>The CultureInfo object used for number substitution must be a specific culture, not a neutral culture or InvariantCulture.</summary>
        internal const string @SpecificNumberCultureRequired = "SpecificNumberCultureRequired";
        /// <summary>Esc</summary>
        internal const string @StopKeyDisplayString = "StopKeyDisplayString";
        /// <summary>Stop</summary>
        internal const string @StopText = "StopText";
        /// <summary>BeginFigure must be called before this API.</summary>
        internal const string @StreamGeometry_NeedBeginFigure = "StreamGeometry_NeedBeginFigure";
        /// <summary>Parameter cannot be a zero-length string.</summary>
        internal const string @StringEmpty = "StringEmpty";
        /// <summary>Maximum number of strokes is two.</summary>
        internal const string @StrokeCollectionCountTooBig = "StrokeCollectionCountTooBig";
        /// <summary>The specified StrokeCollection is read-only.</summary>
        internal const string @StrokeCollectionIsReadOnly = "StrokeCollectionIsReadOnly";
        /// <summary>A duplicate stroke cannot be added to StrokeCollection.</summary>
        internal const string @StrokeIsDuplicated = "StrokeIsDuplicated";
        /// <summary>The strokes being replaced must exist contiguously in the current StrokeCollection.</summary>
        internal const string @StrokesNotContiguously = "StrokesNotContiguously";
        /// <summary>NotifyWhenProcessed can be called only during OnStylusDown, OnStylusMove, or OnStylusUp.</summary>
        internal const string @Stylus_CanOnlyCallForDownMoveOrUp = "Stylus_CanOnlyCallForDownMoveOrUp";
        /// <summary>No current object to return.</summary>
        internal const string @Stylus_EnumeratorFailure = "Stylus_EnumeratorFailure";
        /// <summary>'{0}' is not a valid index in the collection.</summary>
        internal const string @Stylus_IndexOutOfRange = "Stylus_IndexOutOfRange";
        /// <summary>'{0}' must be greater than or equal to '{1}'.</summary>
        internal const string @Stylus_InvalidMax = "Stylus_InvalidMax";
        /// <summary>Matrix is not invertible.</summary>
        internal const string @Stylus_MatrixNotInvertable = "Stylus_MatrixNotInvertable";
        /// <summary>Stylus or Mouse must be in the down state when calling Reset.</summary>
        internal const string @Stylus_MustBeDownToCallReset = "Stylus_MustBeDownToCallReset";
        /// <summary>Stylus input encountered an error.</summary>
        internal const string @Stylus_PenContextFailure = "Stylus_PenContextFailure";
        /// <summary>'{0}' already exists in the collection.</summary>
        internal const string @Stylus_PlugInIsDuplicated = "Stylus_PlugInIsDuplicated";
        /// <summary>'{0}' must be non-null.</summary>
        internal const string @Stylus_PlugInIsNull = "Stylus_PlugInIsNull";
        /// <summary>'{0}' does not exist in the collection.</summary>
        internal const string @Stylus_PlugInNotExist = "Stylus_PlugInNotExist";
        /// <summary>Count of points must be greater than zero.</summary>
        internal const string @Stylus_StylusPointsCantBeEmpty = "Stylus_StylusPointsCantBeEmpty";
        /// <summary>Text breakpoint was previously disposed.</summary>
        internal const string @TextBreakpointHasBeenDisposed = "TextBreakpointHasBeenDisposed";
        /// <summary>'{0}' does not have a valid InputManager.</summary>
        internal const string @TextCompositionManager_NoInputManager = "TextCompositionManager_NoInputManager";
        /// <summary>'{0}' has already finished.</summary>
        internal const string @TextCompositionManager_TextCompositionHasDone = "TextCompositionManager_TextCompositionHasDone";
        /// <summary>'{0}' has already started.</summary>
        internal const string @TextCompositionManager_TextCompositionHasStarted = "TextCompositionManager_TextCompositionHasStarted";
        /// <summary>'{0}' has not yet started.</summary>
        internal const string @TextCompositionManager_TextCompositionNotStarted = "TextCompositionManager_TextCompositionNotStarted";
        /// <summary>Result text cannot be null.</summary>
        internal const string @TextComposition_NullResultText = "TextComposition_NullResultText";
        /// <summary>Cannot reenter Text formatting engine during optimal paragraph formatting.</summary>
        internal const string @TextFormatterReentranceProhibited = "TextFormatterReentranceProhibited";
        /// <summary>Text line was previously disposed.</summary>
        internal const string @TextLineHasBeenDisposed = "TextLineHasBeenDisposed";
        /// <summary>The return value of TextEmbeddedObject.Format contains an out-of-range value for the Width property.</summary>
        internal const string @TextObjectMetrics_WidthOutOfRange = "TextObjectMetrics_WidthOutOfRange";
        /// <summary>Text penalty module was previously disposed.</summary>
        internal const string @TextPenaltyModuleHasBeenDisposed = "TextPenaltyModuleHasBeenDisposed";
        /// <summary>'{0}' parameter value is not a valid child element of the text provider.</summary>
        internal const string @TextProvider_InvalidChild = "TextProvider_InvalidChild";
        /// <summary>'{0}' parameter value is not a valid ITextRangeProvider.</summary>
        internal const string @TextRangeProvider_InvalidRangeProvider = "TextRangeProvider_InvalidRangeProvider";
        /// <summary>The Properties member of this text run cannot be null.</summary>
        internal const string @TextRunPropertiesCannotBeNull = "TextRunPropertiesCannotBeNull";
        /// <summary>The sum of AccelerationRatio and DecelerationRatio must be less than or equal to one.</summary>
        internal const string @Timing_AccelAndDecelGreaterThanOne = "Timing_AccelAndDecelGreaterThanOne";
        /// <summary>CanSlip is supported only on timelines without AutoReverse, AccelerationRatio, or DecelerationRatio.</summary>
        internal const string @Timing_CanSlipOnlyOnSimpleTimelines = "Timing_CanSlipOnlyOnSimpleTimelines";
        /// <summary>A child of a Timeline in "XAML" must also be a Timeline or a class that derives from Timeline.</summary>
        internal const string @Timing_ChildMustBeTimeline = "Timing_ChildMustBeTimeline";
        /// <summary>The {0}.CreateClock method returned a pre-existing object, rather than a new object inheriting from TimelineClock.</summary>
        internal const string @Timing_CreateClockMustReturnNewClock = "Timing_CreateClockMustReturnNewClock";
        /// <summary>The specified timeline belongs to a different thread than this timeline.</summary>
        internal const string @Timing_DifferentThreads = "Timing_DifferentThreads";
        /// <summary>The enumeration is no longer valid because the collection it enumerates has changed.</summary>
        internal const string @Timing_EnumeratorInvalidated = "Timing_EnumeratorInvalidated";
        /// <summary>The enumerator is out of range.</summary>
        internal const string @Timing_EnumeratorOutOfRange = "Timing_EnumeratorOutOfRange";
        /// <summary>Property value must be between 0.0 and 1.0.</summary>
        internal const string @Timing_InvalidArgAccelAndDecel = "Timing_InvalidArgAccelAndDecel";
        /// <summary>Property value must be finite and greater than or equal to zero.</summary>
        internal const string @Timing_InvalidArgFiniteNonNegative = "Timing_InvalidArgFiniteNonNegative";
        /// <summary>Property value must be finite and greater than zero.</summary>
        internal const string @Timing_InvalidArgFinitePositive = "Timing_InvalidArgFinitePositive";
        /// <summary>Property value must be greater than or equal to zero or indefinite.</summary>
        internal const string @Timing_InvalidArgNonNegative = "Timing_InvalidArgNonNegative";
        /// <summary>Property value must be greater than zero or indefinite.</summary>
        internal const string @Timing_InvalidArgPositive = "Timing_InvalidArgPositive";
        /// <summary>Timeline objects cannot have text objects as children.</summary>
        internal const string @Timing_NoTextChildren = "Timing_NoTextChildren";
        /// <summary>Unable to return a TimeSpan property value for a Duration value of '{0}'. Check the HasTimeSpan property before requesting the TimeSpan property value from a Duration.</summary>
        internal const string @Timing_NotTimeSpan = "Timing_NotTimeSpan";
        /// <summary>A timing operation has been not been queued in the appropriate order.</summary>
        internal const string @Timing_OperationEnqueuedOutOfOrder = "Timing_OperationEnqueuedOutOfOrder";
        /// <summary>'{0}' is not a valid IterationCount value for a RepeatBehavior structure. An IterationCount value must represent a number that is greater than or equal to zero but not infinite.</summary>
        internal const string @Timing_RepeatBehaviorInvalidIterationCount = "Timing_RepeatBehaviorInvalidIterationCount";
        /// <summary>'{0}' is not a valid RepeatDuration value for a RepeatBehavior structure. A RepeatDuration value must be a TimeSpan value greater than or equal to zero ticks.</summary>
        internal const string @Timing_RepeatBehaviorInvalidRepeatDuration = "Timing_RepeatBehaviorInvalidRepeatDuration";
        /// <summary>'{0}' RepeatBehavior does not represent an iteration count and does not have an IterationCount value.</summary>
        internal const string @Timing_RepeatBehaviorNotIterationCount = "Timing_RepeatBehaviorNotIterationCount";
        /// <summary>'{0}' RepeatBehavior does not represent a repeat duration and does not have a RepeatDuration value.</summary>
        internal const string @Timing_RepeatBehaviorNotRepeatDuration = "Timing_RepeatBehaviorNotRepeatDuration";
        /// <summary>The ClockController.Seek method was called with arguments that describe a seek destination that seeks a child with Slip but no defined duration. It is unclear if we are seeking the child or seeking past the child's duration.</summary>
        internal const string @Timing_SeekDestinationAmbiguousDueToSlip = "Timing_SeekDestinationAmbiguousDueToSlip";
        /// <summary>The ClockController.Seek method was called using TimeSeekOrigin.Duration as the seekOrigin parameter for a Clock that has a duration of Forever. Clocks that have duration of Forever must use TimeSeekOrigin.BeginTime.</summary>
        internal const string @Timing_SeekDestinationIndefinite = "Timing_SeekDestinationIndefinite";
        /// <summary>The ClockController.Seek method was called with arguments that describe a seek destination with a negative value. The seek destination must be a time greater than or equal to zero.</summary>
        internal const string @Timing_SeekDestinationNegative = "Timing_SeekDestinationNegative";
        /// <summary>Cannot call the ClockController.SkipToFill method for a Clock that has a Duration or RepeatDuration of Forever, because this Clock will never reach its fill period.</summary>
        internal const string @Timing_SkipToFillDestinationIndefinite = "Timing_SkipToFillDestinationIndefinite";
        /// <summary>SlipBehavior.Slip is supported only on root ParallelTimelines that do not reverse, accelerate, decelerate, or have a RepeatBehavior specified as a Duration.</summary>
        internal const string @Timing_SlipBehavior_SlipOnlyOnSimpleTimelines = "Timing_SlipBehavior_SlipOnlyOnSimpleTimelines";
        /// <summary>Clocks with CanSlip cannot have parents or ancestors with AutoReverse, AccelerationRatio, or DecelerationRatio.</summary>
        internal const string @Timing_SlipBehavior_SyncOnlyWithSimpleParents = "Timing_SlipBehavior_SyncOnlyWithSimpleParents";
        /// <summary>Empty token encountered at position {0} while parsing '{1}'.</summary>
        internal const string @TokenizerHelperEmptyToken = "TokenizerHelperEmptyToken";
        /// <summary>Extra data encountered at position {0} while parsing '{1}'.</summary>
        internal const string @TokenizerHelperExtraDataEncountered = "TokenizerHelperExtraDataEncountered";
        /// <summary>Missing end quote encountered while parsing '{0}'.</summary>
        internal const string @TokenizerHelperMissingEndQuote = "TokenizerHelperMissingEndQuote";
        /// <summary>Premature string termination encountered while parsing '{0}'.</summary>
        internal const string @TokenizerHelperPrematureStringTermination = "TokenizerHelperPrematureStringTermination";
        /// <summary>Too many glyph runs in the scene to render.</summary>
        internal const string @TooManyGlyphRuns = "TooManyGlyphRuns";
        /// <summary>RoutedEvent/EventPrivateKey limit exceeded. Routed events or EventPrivateKey for CLR events are typically static class members registered with field initializers or static constructors. In this case, routed events or EventPrivateKeys might be getting initi ...</summary>
        internal const string @TooManyRoutedEvents = "TooManyRoutedEvents";
        /// <summary>Touch</summary>
        internal const string @Touch_Category = "Touch_Category";
        /// <summary>The TouchDevice is already activated.</summary>
        internal const string @Touch_DeviceAlreadyActivated = "Touch_DeviceAlreadyActivated";
        /// <summary>The TouchDevice is not activated.</summary>
        internal const string @Touch_DeviceNotActivated = "Touch_DeviceNotActivated";
        /// <summary>Potential cycle in tree found while building the event route.</summary>
        internal const string @TreeLoop = "TreeLoop";
        /// <summary>Cannot change property metadata after it has been associated with a property.</summary>
        internal const string @TypeMetadataCannotChangeAfterUse = "TypeMetadataCannotChangeAfterUse";
        /// <summary>Cannot call Arrange on a UIElement with infinite size or NaN. Parent of type '{0}' invokes the UIElement. Arrange called on element of type '{1}'.</summary>
        internal const string @UIElement_Layout_InfinityArrange = "UIElement_Layout_InfinityArrange";
        /// <summary>UIElement.Measure(availableSize) cannot be called with NaN size.</summary>
        internal const string @UIElement_Layout_NaNMeasure = "UIElement_Layout_NaNMeasure";
        /// <summary>Layout measurement override of element '{0}' should not return NaN values as its DesiredSize.</summary>
        internal const string @UIElement_Layout_NaNReturned = "UIElement_Layout_NaNReturned";
        /// <summary>Layout measurement override of element '{0}' should not return PositiveInfinity as its DesiredSize, even if Infinity is passed in as available size.</summary>
        internal const string @UIElement_Layout_PositiveInfinityReturned = "UIElement_Layout_PositiveInfinityReturned";
        /// <summary>Access denied to the path '{0}'.</summary>
        internal const string @UnauthorizedAccessExceptionWithFileName = "UnauthorizedAccessExceptionWithFileName";
        /// <summary>Ctrl+Z</summary>
        internal const string @UndoKeyDisplayString = "UndoKeyDisplayString";
        /// <summary>Undo</summary>
        internal const string @UndoText = "UndoText";
        /// <summary>Parameter is unexpected type '{0}'. Expected type is '{1}'.</summary>
        internal const string @UnexpectedParameterType = "UnexpectedParameterType";
        /// <summary>Unexpected Stroke in PropertyDataChangedEventArgs.Owner.</summary>
        internal const string @UnexpectedStroke = "UnexpectedStroke";
        /// <summary>Unknown path operation attempted.</summary>
        internal const string @UnknownPathOperationType = "UnknownPathOperationType";
        /// <summary>Unrecognized Stroke in PropertyDataChangedEventArgs.Owner.</summary>
        internal const string @UnknownStroke = "UnknownStroke";
        /// <summary>Unrecognized Stroke in Stroke.Invalidated event arguments.</summary>
        internal const string @UnknownStroke1 = "UnknownStroke1";
        /// <summary>Unrecognized Stroke in StrokeCollectionChangedEventArgs.Removed.</summary>
        internal const string @UnknownStroke3 = "UnknownStroke3";
        /// <summary>Failed to initialize GestureRecognizer.</summary>
        internal const string @UnspecifiedGestureConstructionException = "UnspecifiedGestureConstructionException";
        /// <summary>Gesture recognition failed.</summary>
        internal const string @UnspecifiedGestureException = "UnspecifiedGestureException";
        /// <summary>Failed to set enabled gestures.</summary>
        internal const string @UnspecifiedSetEnabledGesturesException = "UnspecifiedSetEnabledGesturesException";
        /// <summary>Unsupported MouseAction '{0}'.</summary>
        internal const string @Unsupported_MouseAction = "Unsupported_MouseAction";
        /// <summary>URI must be absolute. Relative URIs are not supported.</summary>
        internal const string @UriMustBeAbsolute = "UriMustBeAbsolute";
        /// <summary>Font family Uri should have either file:// or pack://application: scheme.</summary>
        internal const string @UriMustBeFileOrPack = "UriMustBeFileOrPack";
        /// <summary>URI must be absolute.</summary>
        internal const string @UriNotAbsolute = "UriNotAbsolute";
        /// <summary>This factory supports only URIs with the '{0}' scheme.</summary>
        internal const string @UriSchemeMismatch = "UriSchemeMismatch";
        /// <summary>UsesPerPixelOpacity is obsolete and should not be set when using UsesPerPixelTransparency</summary>
        internal const string @UsesPerPixelOpacityIsObsolete = "UsesPerPixelOpacityIsObsolete";
        /// <summary>Value is not valid for the specified GUID.</summary>
        internal const string @ValueNotValidForGuid = "ValueNotValidForGuid";
        /// <summary>MaterialGroup cannot be an interactive Material (IsVisualHostMaterial is true).</summary>
        internal const string @Viewport2DVisual3D_MaterialGroupIsInteractiveMaterial = "Viewport2DVisual3D_MaterialGroupIsInteractiveMaterial";
        /// <summary>Viewport2DVisual3D supports only one interactive Material.</summary>
        internal const string @Viewport2DVisual3D_MultipleInteractiveMaterials = "Viewport2DVisual3D_MultipleInteractiveMaterials";
        /// <summary>Specified Visual cannot be detached.</summary>
        internal const string @VisualCannotBeDetached = "VisualCannotBeDetached";
        /// <summary>Specified index is already in use. Disconnect the Visual child at the specified index first.</summary>
        internal const string @VisualCollection_EntryInUse = "VisualCollection_EntryInUse";
        /// <summary>Number of entries exceeds specified capacity of the VisualCollection.</summary>
        internal const string @VisualCollection_NotEnoughCapacity = "VisualCollection_NotEnoughCapacity";
        /// <summary>This VisualCollection is read only and cannot be modified.</summary>
        internal const string @VisualCollection_ReadOnly = "VisualCollection_ReadOnly";
        /// <summary>Specified Visual is already a child of another Visual or the root of a CompositionTarget.</summary>
        internal const string @VisualCollection_VisualHasParent = "VisualCollection_VisualHasParent";
        /// <summary>Another target is already connected to this HostVisual.</summary>
        internal const string @VisualTarget_AnotherTargetAlreadyConnected = "VisualTarget_AnotherTargetAlreadyConnected";
        /// <summary>Specified index is out of range or child at index is null. Do not call this method if VisualChildrenCount returns zero, indicating that the Visual has no children.</summary>
        internal const string @Visual_ArgumentOutOfRange = "Visual_ArgumentOutOfRange";
        /// <summary>This Visual cannot transform the given point.</summary>
        internal const string @Visual_CannotTransformPoint = "Visual_CannotTransformPoint";
        /// <summary>Must disconnect specified child from current parent Visual before attaching to new parent Visual.</summary>
        internal const string @Visual_HasParent = "Visual_HasParent";
        /// <summary>The specified Visual and this Visual do not share a common ancestor, so there is no valid transformation between the two Visuals.</summary>
        internal const string @Visual_NoCommonAncestor = "Visual_NoCommonAncestor";
        /// <summary>This Visual is not connected to a PresentationSource.</summary>
        internal const string @Visual_NoPresentationSource = "Visual_NoPresentationSource";
        /// <summary>'{0}' is not a Visual3D.</summary>
        internal const string @Visual_NotA3DVisual = "Visual_NotA3DVisual";
        /// <summary>The specified Visual is not a descendant of this Visual.</summary>
        internal const string @Visual_NotADescendant = "Visual_NotADescendant";
        /// <summary>The specified Visual is not an ancestor of this Visual.</summary>
        internal const string @Visual_NotAnAncestor = "Visual_NotAnAncestor";
        /// <summary>'{0}' is not a Visual or Visual3D.</summary>
        internal const string @Visual_NotAVisual = "Visual_NotAVisual";
        /// <summary>Specified Visual is not a child of this Visual.</summary>
        internal const string @Visual_NotChild = "Visual_NotChild";
        /// <summary>WebRequest timed out. Response did not arrive before the specified Timeout period elapsed.</summary>
        internal const string @WebRequestTimeout = "WebRequestTimeout";
        /// <summary>Error closing the WebResponse.</summary>
        internal const string @WebResponseCloseFailure = "WebResponseCloseFailure";
        /// <summary>Error processing WebResponse.</summary>
        internal const string @WebResponseFailure = "WebResponseFailure";
        /// <summary>Requested PackagePart not found in target resource.</summary>
        internal const string @WebResponsePartNotFound = "WebResponsePartNotFound";
        /// <summary>Object must be initialized before operation can be performed.</summary>
        internal const string @WIC_NotInitialized = "WIC_NotInitialized";
        /// <summary>Stream does not support writing.</summary>
        internal const string @WriteNotSupported = "WriteNotSupported";
        /// <summary>The required pattern for URI containing ";component" is "AssemblyName;Vxxxx;PublicKey;component", where Vxxxx is the assembly version and PublicKey is the 16-character string representing the assembly public key token. Vxxxx and PublicKey are optional.</summary>
        internal const string @WrongFirstSegment = "WrongFirstSegment";
        /// <summary>There is no registered CultureInfo with the IetfLanguageTag '{0}'.</summary>
        internal const string @XmlLangGetCultureFailure = "XmlLangGetCultureFailure";
        /// <summary>Cannot find non-neutral culture related to '{0}'.</summary>
        internal const string @XmlLangGetSpecificCulture = "XmlLangGetSpecificCulture";
        /// <summary>'{0}' language tag must be empty or must conform to grammar defined in IETF RFC 3066.</summary>
        internal const string @XmlLangMalformed = "XmlLangMalformed";
        /// <summary></summary>
        internal const string @ZoomKey = "ZoomKey";
        /// <summary></summary>
        internal const string @ZoomKeyDisplayString = "ZoomKeyDisplayString";
        /// <summary>Zoom</summary>
        internal const string @ZoomText = "ZoomText";
        /// <summary>{0} failed to load from static constructor.</summary>
        internal const string @PenImcDllVerificationFailed = "PenImcDllVerificationFailed";
        /// <summary>SxS COM registration of {0} failed.</summary>
        internal const string @PenImcSxSRegistrationFailed = "PenImcSxSRegistrationFailed";

    }
}
